!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=134)}([function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(67))},function(t,e,n){var r=n(0),o=n(14),i=n(33),u=n(57),c=r.Symbol,s=o("wks");t.exports=function(t){return s[t]||(s[t]=u&&c[t]||(u?c:i)("Symbol."+t))}},function(t,e,n){"use strict";n.d(e,"f",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"i",(function(){return i})),n.d(e,"l",(function(){return u})),n.d(e,"m",(function(){return c})),n.d(e,"k",(function(){return s})),n.d(e,"c",(function(){return a})),n.d(e,"e",(function(){return f})),n.d(e,"g",(function(){return l})),n.d(e,"a",(function(){return p})),n.d(e,"j",(function(){return v})),n.d(e,"h",(function(){return d})),n.d(e,"d",(function(){return h}));var r=document.querySelector(".searching__error"),o=document.querySelector(".card-list"),i=document.querySelector(".cards__container"),u=document.querySelector(".button__show-more"),c=document.querySelector(".waiting"),s=document.querySelector(".nothing"),a=document.querySelector(".glide__slides"),f=document.querySelector(".graph__rows"),l=document.getElementById("bottomLoader"),p=document.getElementById("askHeading"),v=document.getElementById("newsPerWeek"),d=document.getElementById("mentionsInHeadings"),h=document.getElementById("currentMonth")},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(9),o=n(8),i=n(17);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(9),o=n(43),i=n(5),u=n(26),c=Object.defineProperty;e.f=r?c:function(t,e,n){if(i(t),e=u(e,!0),i(n),o)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(0),o=n(23).f,i=n(7),u=n(13),c=n(28),s=n(52),a=n(45);t.exports=function(t,e){var n,f,l,p,v,d=t.target,h=t.global,y=t.stat;if(n=h?r:y?r[d]||c(d,{}):(r[d]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(v=o(n,f))&&v.value:n[f],!a(h?f:d+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;s(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(n,f,p,t)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(42),o=n(25);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(0),o=n(14),i=n(7),u=n(6),c=n(28),s=n(44),a=n(19),f=a.get,l=a.enforce,p=String(s).split("toString");o("inspectSource",(function(t){return s.call(t)})),(t.exports=function(t,e,n,o){var s=!!o&&!!o.unsafe,a=!!o&&!!o.enumerable,f=!!o&&!!o.noTargetGet;"function"==typeof n&&("string"!=typeof e||u(n,"name")||i(n,"name",e),l(n).source=p.join("string"==typeof e?e:"")),t!==r?(s?!f&&t[e]&&(a=!0):delete t[e],a?t[e]=n:i(t,e,n)):a?t[e]=n:c(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||s.call(this)}))},function(t,e,n){var r=n(18),o=n(68);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.4.1",mode:r?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(53),o=n(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=!1},function(t,e,n){var r,o,i,u=n(69),c=n(0),s=n(4),a=n(7),f=n(6),l=n(29),p=n(27),v=c.WeakMap;if(u){var d=new v,h=d.get,y=d.has,m=d.set;r=function(t,e){return m.call(d,t,e),e},o=function(t){return h.call(d,t)||{}},i=function(t){return y.call(d,t)}}else{var g=l("state");p[g]=!0,r=function(t,e){return a(t,g,e),e},o=function(t){return f(t,g)?t[g]:{}},i=function(t){return f(t,g)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!s(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(34),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(25);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports={}},function(t,e,n){var r=n(9),o=n(51),i=n(17),u=n(12),c=n(26),s=n(6),a=n(43),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=u(t),e=c(e,!0),a)try{return f(t,e)}catch(t){}if(s(t,e))return i(!o.f.call(t,e),t[e])}},,function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(7);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(14),o=n(33),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,n){var r=n(8).f,o=n(6),i=n(1)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(11);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(0),o=n(4),i=r.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(16);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(54),o=n(37).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(13),o=n(72),i=Object.prototype;o!==i.toString&&r(i,"toString",o,{unsafe:!0})},function(t,e,n){var r,o,i=n(0),u=n(49),c=i.process,s=c&&c.versions,a=s&&s.v8;a?o=(r=a.split("."))[0]+r[1]:u&&(!(r=u.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=u.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},,function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));n(101),n(103);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.elem=n,this._setHandlers(e)}var e,n,o;return e=t,(n=[{key:"_setHandlers",value:function(t){var e=this;t&&(console.log(t),t.forEach((function(t){var n=t.event,r=t.func;e.elem.addEventListener(n,r)})))}}])&&r(e.prototype,n),o&&r(e,o),t}()},function(t,e,n){var r=n(3),o=n(11),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(9),o=n(3),i=n(32);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(14);t.exports=r("native-function-to-string",Function.toString)},function(t,e,n){var r=n(3),o=/#|\.prototype\./,i=function(t,e){var n=c[u(t)];return n==a||n!=s&&("function"==typeof e?r(e):!!e)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",a=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(11),o=n(1)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){var r,o,i,u=n(0),c=n(3),s=n(11),a=n(35),f=n(58),l=n(32),p=n(48),v=u.location,d=u.setImmediate,h=u.clearImmediate,y=u.process,m=u.MessageChannel,g=u.Dispatch,b=0,w={},x=function(t){if(w.hasOwnProperty(t)){var e=w[t];delete w[t],e()}},S=function(t){return function(){x(t)}},_=function(t){x(t.data)},O=function(t){u.postMessage(t+"",v.protocol+"//"+v.host)};d&&h||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return w[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete w[t]},"process"==s(y)?r=function(t){y.nextTick(S(t))}:g&&g.now?r=function(t){g.now(S(t))}:m&&!p?(i=(o=new m).port2,o.port1.onmessage=_,r=a(i.postMessage,i,1)):!u.addEventListener||"function"!=typeof postMessage||u.importScripts||c(O)?r="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),x(t)}}:function(t){setTimeout(S(t),0)}:(r=O,u.addEventListener("message",_,!1))),t.exports={set:d,clear:h}},function(t,e,n){var r=n(49);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(15);t.exports=r("navigator","userAgent")||""},function(t,e,n){"use strict";var r=n(16),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(6),o=n(70),i=n(23),u=n(8);t.exports=function(t,e){for(var n=o(e),c=u.f,s=i.f,a=0;a<n.length;a++){var f=n[a];r(t,f)||c(t,f,s(e,f))}}},function(t,e,n){t.exports=n(0)},function(t,e,n){var r=n(6),o=n(12),i=n(71).indexOf,u=n(27);t.exports=function(t,e){var n,c=o(t),s=0,a=[];for(n in c)!r(u,n)&&r(c,n)&&a.push(n);for(;e.length>s;)r(c,n=e[s++])&&(~i(a,n)||a.push(n));return a}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!n||!r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){var r=n(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(15);t.exports=r("document","documentElement")},function(t,e,n){var r=n(5),o=n(109),i=n(37),u=n(27),c=n(58),s=n(32),a=n(29)("IE_PROTO"),f=function(){},l=function(){var t,e=s("iframe"),n=i.length;for(e.style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;n--;)delete l.prototype[i[n]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=r(t),n=new f,f.prototype=null,n[a]=t):n=l(),void 0===e?n:o(n,e)},u[a]=!0},function(t,e,n){"use strict";var r=n(12),o=n(111),i=n(22),u=n(19),c=n(94),s=u.set,a=u.getterFor("Array Iterator");t.exports=c(Array,"Array",(function(t,e){s(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=a(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e,n){var r=n(6),o=n(21),i=n(29),u=n(96),c=i("IE_PROTO"),s=Object.prototype;t.exports=u?Object.getPrototypeOf:function(t){return t=o(t),r(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,n){var r=n(34),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e,n){var r=n(5),o=n(16),i=n(1)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||null==(n=r(u)[i])?e:o(n)}},function(t,e,n){var r=n(35),o=n(42),i=n(21),u=n(20),c=n(65),s=[].push,a=function(t){var e=1==t,n=2==t,a=3==t,f=4==t,l=6==t,p=5==t||l;return function(v,d,h,y){for(var m,g,b=i(v),w=o(b),x=r(d,h,3),S=u(w.length),_=0,O=y||c,j=e?O(v,S):n?O(v,0):void 0;S>_;_++)if((p||_ in w)&&(g=x(m=w[_],_,b),t))if(e)j[_]=g;else if(g)switch(t){case 3:return!0;case 5:return m;case 6:return _;case 2:s.call(j,m)}else if(f)return!1;return l?-1:a||f?f:j}};t.exports={forEach:a(0),map:a(1),filter:a(2),some:a(3),every:a(4),find:a(5),findIndex:a(6)}},function(t,e,n){var r=n(4),o=n(31),i=n(1)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(0),o=n(28),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,n){var r=n(0),o=n(44),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o.call(i))},function(t,e,n){var r=n(15),o=n(36),i=n(55),u=n(5);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(u(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(12),o=n(20),i=n(62),u=function(t){return function(e,n,u){var c,s=r(e),a=o(s.length),f=i(u,a);if(t&&n!=n){for(;a>f;)if((c=s[f++])!=c)return!0}else for(;a>f;f++)if((t||f in s)&&s[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},function(t,e,n){"use strict";var r=n(46),o={};o[n(1)("toStringTag")]="z",t.exports="[object z]"!==String(o)?function(){return"[object "+r(this)+"]"}:o.toString},function(t,e,n){"use strict";var r,o,i,u,c=n(10),s=n(18),a=n(0),f=n(15),l=n(74),p=n(13),v=n(75),d=n(14),h=n(30),y=n(76),m=n(4),g=n(16),b=n(77),w=n(11),x=n(78),S=n(82),_=n(63),O=n(47).set,j=n(83),k=n(84),T=n(85),P=n(50),E=n(86),A=n(19),C=n(45),L=n(1),M=n(39),H=L("species"),I="Promise",R=A.get,z=A.set,N=A.getterFor(I),q=l,D=a.TypeError,F=a.document,G=a.process,V=d("inspectSource"),B=f("fetch"),W=P.f,Y=W,J="process"==w(G),U=!!(F&&F.createEvent&&a.dispatchEvent),K=C(I,(function(){var t=V(q)!==String(q);if(66===M)return!0;if(!t&&!J&&"function"!=typeof PromiseRejectionEvent)return!0;if(s&&!q.prototype.finally)return!0;if(M>=51&&/native code/.test(q))return!1;var e=q.resolve(1),n=function(t){t((function(){}),(function(){}))};return(e.constructor={})[H]=n,!(e.then((function(){}))instanceof n)})),$=K||!S((function(t){q.all(t).catch((function(){}))})),Q=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;j((function(){for(var o=e.value,i=1==e.state,u=0;r.length>u;){var c,s,a,f=r[u++],l=i?f.ok:f.fail,p=f.resolve,v=f.reject,d=f.domain;try{l?(i||(2===e.rejection&&nt(t,e),e.rejection=1),!0===l?c=o:(d&&d.enter(),c=l(o),d&&(d.exit(),a=!0)),c===f.promise?v(D("Promise-chain cycle")):(s=Q(c))?s.call(c,p,v):p(c)):v(o)}catch(t){d&&!a&&d.exit(),v(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&tt(t,e)}))}},Z=function(t,e,n){var r,o;U?((r=F.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),a.dispatchEvent(r)):r={promise:e,reason:n},(o=a["on"+t])?o(r):"unhandledrejection"===t&&T("Unhandled promise rejection",n)},tt=function(t,e){O.call(a,(function(){var n,r=e.value;if(et(e)&&(n=E((function(){J?G.emit("unhandledRejection",r,t):Z("unhandledrejection",t,r)})),e.rejection=J||et(e)?2:1,n.error))throw n.value}))},et=function(t){return 1!==t.rejection&&!t.parent},nt=function(t,e){O.call(a,(function(){J?G.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},rt=function(t,e,n,r){return function(o){t(e,n,o,r)}},ot=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,X(t,e,!0))},it=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw D("Promise can't be resolved itself");var o=Q(n);o?j((function(){var r={done:!1};try{o.call(n,rt(it,t,r,e),rt(ot,t,r,e))}catch(n){ot(t,r,n,e)}})):(e.value=n,e.state=1,X(t,e,!1))}catch(n){ot(t,{done:!1},n,e)}}};K&&(q=function(t){b(this,q,I),g(t),r.call(this);var e=R(this);try{t(rt(it,this,e),rt(ot,this,e))}catch(t){ot(this,e,t)}},(r=function(t){z(this,{type:I,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=v(q.prototype,{then:function(t,e){var n=N(this),r=W(_(this,q));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=J?G.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=R(t);this.promise=t,this.resolve=rt(it,t,e),this.reject=rt(ot,t,e)},P.f=W=function(t){return t===q||t===i?new o(t):Y(t)},s||"function"!=typeof l||(u=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new q((function(t,e){u.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof B&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return k(q,B.apply(a,arguments))}}))),c({global:!0,wrap:!0,forced:K},{Promise:q}),h(q,I,!1,!0),y(I),i=f(I),c({target:I,stat:!0,forced:K},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),c({target:I,stat:!0,forced:s||K},{resolve:function(t){return k(s&&this===i?q:this,t)}}),c({target:I,stat:!0,forced:$},{all:function(t){var e=this,n=W(e),r=n.resolve,o=n.reject,i=E((function(){var n=g(e.resolve),i=[],u=0,c=1;x(t,(function(t){var s=u++,a=!1;i.push(void 0),c++,n.call(e,t).then((function(t){a||(a=!0,i[s]=t,--c||r(i))}),o)})),--c||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=W(e),r=n.reject,o=E((function(){var o=g(e.resolve);x(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r=n(0);t.exports=r.Promise},function(t,e,n){var r=n(13);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(15),o=n(8),i=n(1),u=n(9),c=i("species");t.exports=function(t){var e=r(t),n=o.f;u&&e&&!e[c]&&n(e,c,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(5),o=n(79),i=n(20),u=n(35),c=n(80),s=n(81),a=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,f,l){var p,v,d,h,y,m,g,b=u(e,n,f?2:1);if(l)p=t;else{if("function"!=typeof(v=c(t)))throw TypeError("Target is not iterable");if(o(v)){for(d=0,h=i(t.length);h>d;d++)if((y=f?b(r(g=t[d])[0],g[1]):b(t[d]))&&y instanceof a)return y;return new a(!1)}p=v.call(t)}for(m=p.next;!(g=m.call(p)).done;)if("object"==typeof(y=s(p,b,g.value,f))&&y&&y instanceof a)return y;return new a(!1)}).stop=function(t){return new a(!0,t)}},function(t,e,n){var r=n(1),o=n(22),i=r("iterator"),u=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||u[i]===t)}},function(t,e,n){var r=n(46),o=n(22),i=n(1)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(5);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(1)("iterator"),o=!1;try{var i=0,u={next:function(){return{done:!!i++}},return:function(){o=!0}};u[r]=function(){return this},Array.from(u,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r,o,i,u,c,s,a,f,l=n(0),p=n(23).f,v=n(11),d=n(47).set,h=n(48),y=l.MutationObserver||l.WebKitMutationObserver,m=l.process,g=l.Promise,b="process"==v(m),w=p(l,"queueMicrotask"),x=w&&w.value;x||(r=function(){var t,e;for(b&&(t=m.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?u():i=void 0,t}}i=void 0,t&&t.enter()},b?u=function(){m.nextTick(r)}:y&&!h?(c=!0,s=document.createTextNode(""),new y(r).observe(s,{characterData:!0}),u=function(){s.data=c=!c}):g&&g.resolve?(a=g.resolve(void 0),f=a.then,u=function(){f.call(a,r)}):u=function(){d.call(l,r)}),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,u()),i=e}},function(t,e,n){var r=n(5),o=n(4),i=n(50);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(0);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){"use strict";var r=n(10),o=n(0),i=n(15),u=n(18),c=n(9),s=n(57),a=n(3),f=n(6),l=n(31),p=n(4),v=n(5),d=n(21),h=n(12),y=n(26),m=n(17),g=n(59),b=n(88),w=n(36),x=n(110),S=n(55),_=n(23),O=n(8),j=n(51),k=n(7),T=n(13),P=n(14),E=n(29),A=n(27),C=n(33),L=n(1),M=n(89),H=n(90),I=n(30),R=n(19),z=n(64).forEach,N=E("hidden"),q=L("toPrimitive"),D=R.set,F=R.getterFor("Symbol"),G=Object.prototype,V=o.Symbol,B=i("JSON","stringify"),W=_.f,Y=O.f,J=x.f,U=j.f,K=P("symbols"),$=P("op-symbols"),Q=P("string-to-symbol-registry"),X=P("symbol-to-string-registry"),Z=P("wks"),tt=o.QObject,et=!tt||!tt.prototype||!tt.prototype.findChild,nt=c&&a((function(){return 7!=g(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=W(G,e);r&&delete G[e],Y(t,e,n),r&&t!==G&&Y(G,e,r)}:Y,rt=function(t,e){var n=K[t]=g(V.prototype);return D(n,{type:"Symbol",tag:t,description:e}),c||(n.description=e),n},ot=s&&"symbol"==typeof V.iterator?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof V},it=function(t,e,n){t===G&&it($,e,n),v(t);var r=y(e,!0);return v(n),f(K,r)?(n.enumerable?(f(t,N)&&t[N][r]&&(t[N][r]=!1),n=g(n,{enumerable:m(0,!1)})):(f(t,N)||Y(t,N,m(1,{})),t[N][r]=!0),nt(t,r,n)):Y(t,r,n)},ut=function(t,e){v(t);var n=h(e),r=b(n).concat(ft(n));return z(r,(function(e){c&&!ct.call(n,e)||it(t,e,n[e])})),t},ct=function(t){var e=y(t,!0),n=U.call(this,e);return!(this===G&&f(K,e)&&!f($,e))&&(!(n||!f(this,e)||!f(K,e)||f(this,N)&&this[N][e])||n)},st=function(t,e){var n=h(t),r=y(e,!0);if(n!==G||!f(K,r)||f($,r)){var o=W(n,r);return!o||!f(K,r)||f(n,N)&&n[N][r]||(o.enumerable=!0),o}},at=function(t){var e=J(h(t)),n=[];return z(e,(function(t){f(K,t)||f(A,t)||n.push(t)})),n},ft=function(t){var e=t===G,n=J(e?$:h(t)),r=[];return z(n,(function(t){!f(K,t)||e&&!f(G,t)||r.push(K[t])})),r};(s||(T((V=function(){if(this instanceof V)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=C(t),n=function(t){this===G&&n.call($,t),f(this,N)&&f(this[N],e)&&(this[N][e]=!1),nt(this,e,m(1,t))};return c&&et&&nt(G,e,{configurable:!0,set:n}),rt(e,t)}).prototype,"toString",(function(){return F(this).tag})),j.f=ct,O.f=it,_.f=st,w.f=x.f=at,S.f=ft,c&&(Y(V.prototype,"description",{configurable:!0,get:function(){return F(this).description}}),u||T(G,"propertyIsEnumerable",ct,{unsafe:!0})),M.f=function(t){return rt(L(t),t)}),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:V}),z(b(Z),(function(t){H(t)})),r({target:"Symbol",stat:!0,forced:!s},{for:function(t){var e=String(t);if(f(Q,e))return Q[e];var n=V(e);return Q[e]=n,X[n]=e,n},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(f(X,t))return X[t]},useSetter:function(){et=!0},useSimple:function(){et=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!c},{create:function(t,e){return void 0===e?g(t):ut(g(t),e)},defineProperty:it,defineProperties:ut,getOwnPropertyDescriptor:st}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:at,getOwnPropertySymbols:ft}),r({target:"Object",stat:!0,forced:a((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(d(t))}}),B)&&r({target:"JSON",stat:!0,forced:!s||a((function(){var t=V();return"[null]"!=B([t])||"{}"!=B({a:t})||"{}"!=B(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(p(e)||void 0!==t)&&!ot(t))return l(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!ot(e))return e}),o[1]=e,B.apply(null,o)}});V.prototype[q]||k(V.prototype,q,V.prototype.valueOf),I(V,"Symbol"),A[N]=!0},function(t,e,n){var r=n(54),o=n(37);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){e.f=n(1)},function(t,e,n){var r=n(53),o=n(6),i=n(89),u=n(8).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||u(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(10),o=n(9),i=n(0),u=n(6),c=n(4),s=n(8).f,a=n(52),f=i.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};a(p,f);var v=p.prototype=f.prototype;v.constructor=p;var d=v.toString,h="Symbol(test)"==String(f("test")),y=/^Symbol\((.*)\)[^)]+$/;s(v,"description",{configurable:!0,get:function(){var t=c(this)?this.valueOf():this,e=d.call(t);if(u(l,t))return"";var n=h?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},function(t,e,n){n(90)("iterator")},,function(t,e,n){"use strict";var r=n(10),o=n(112),i=n(61),u=n(113),c=n(30),s=n(7),a=n(13),f=n(1),l=n(18),p=n(22),v=n(95),d=v.IteratorPrototype,h=v.BUGGY_SAFARI_ITERATORS,y=f("iterator"),m=function(){return this};t.exports=function(t,e,n,f,v,g,b){o(n,e,f);var w,x,S,_=function(t){if(t===v&&P)return P;if(!h&&t in k)return k[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},O=e+" Iterator",j=!1,k=t.prototype,T=k[y]||k["@@iterator"]||v&&k[v],P=!h&&T||_(v),E="Array"==e&&k.entries||T;if(E&&(w=i(E.call(new t)),d!==Object.prototype&&w.next&&(l||i(w)===d||(u?u(w,d):"function"!=typeof w[y]&&s(w,y,m)),c(w,O,!0,!0),l&&(p[O]=m))),"values"==v&&T&&"values"!==T.name&&(j=!0,P=function(){return T.call(this)}),l&&!b||k[y]===P||s(k,y,P),p[e]=P,v)if(x={values:_("values"),keys:g?P:_("keys"),entries:_("entries")},b)for(S in x)!h&&!j&&S in k||a(k,S,x[S]);else r({target:e,proto:!0,forced:h||j},x);return x}},function(t,e,n){"use strict";var r,o,i,u=n(61),c=n(7),s=n(6),a=n(1),f=n(18),l=a("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(r=o):p=!0),null==r&&(r={}),f||s(r,l)||c(r,l,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},function(t,e,n){var r=n(3);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(10),o=n(3),i=n(21),u=n(61),c=n(96);r({target:"Object",stat:!0,forced:o((function(){u(1)})),sham:!c},{getPrototypeOf:function(t){return u(i(t))}})},function(t,e,n){"use strict";var r=n(107).charAt,o=n(19),i=n(94),u=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){u(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=c(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(0),o=n(100),i=n(60),u=n(7),c=n(1),s=c("iterator"),a=c("toStringTag"),f=i.values;for(var l in o){var p=r[l],v=p&&p.prototype;if(v){if(v[s]!==f)try{u(v,s,f)}catch(t){v[s]=f}if(v[a]||u(v,a,l),o[l])for(var d in i)if(v[d]!==i[d])try{u(v,d,i[d])}catch(t){v[d]=i[d]}}}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){"use strict";var r=n(10),o=n(102);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,n){"use strict";var r=n(64).forEach,o=n(56);t.exports=o("forEach")?function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(t,e,n){var r=n(0),o=n(100),i=n(102),u=n(7);for(var c in o){var s=r[c],a=s&&s.prototype;if(a&&a.forEach!==i)try{u(a,"forEach",i)}catch(t){a.forEach=i}}},,,,function(t,e,n){var r=n(34),o=n(25),i=function(t){return function(e,n){var i,u,c=String(o(e)),s=r(n),a=c.length;return s<0||s>=a?t?"":void 0:(i=c.charCodeAt(s))<55296||i>56319||s+1===a||(u=c.charCodeAt(s+1))<56320||u>57343?t?c.charAt(s):i:t?c.slice(s,s+2):u-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},,function(t,e,n){var r=n(9),o=n(8),i=n(5),u=n(88);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=u(e),c=r.length,s=0;c>s;)o.f(t,n=r[s++],e[n]);return t}},function(t,e,n){var r=n(12),o=n(36).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(1),o=n(59),i=n(7),u=r("unscopables"),c=Array.prototype;null==c[u]&&i(c,u,o(null)),t.exports=function(t){c[u][t]=!0}},function(t,e,n){"use strict";var r=n(95).IteratorPrototype,o=n(59),i=n(17),u=n(30),c=n(22),s=function(){return this};t.exports=function(t,e,n){var a=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),u(t,a,!1,!0),c[a]=s,t}},function(t,e,n){var r=n(5),o=n(114);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=n(9),o=n(8).f,i=Function.prototype,u=i.toString,c=/^\s*function ([^ (]*)/;!r||"name"in i||o(i,"name",{configurable:!0,get:function(){try{return u.call(this).match(c)[1]}catch(t){return""}}})},,,,,,,,,,,,,function(t,e,n){},function(t,e,n){},function(t,e,n){},,,,function(t,e,n){"use strict";n.r(e);n(128),n(129),n(130),n(38),n(73);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.url="https://api.github.com/repos/EugeneTsy/NewsAnalyzer/commits"}var e,n,o;return e=t,(n=[{key:"getResponseJson",value:function(t){return t.ok?t.json():Promise.reject({Error:t.status,Reason:t.statusText})}},{key:"getAllCommits",value:function(){var t=this;return fetch(this.url,{method:"GET"}).then((function(e){return t.getResponseJson(e)}))}}])&&r(e.prototype,n),o&&r(e,o),t}()),i=(n(101),n(103),n(2)),u=(n(87),n(91),n(92),n(60),n(115),n(97),n(98),n(99),n(41)),c=document.querySelector("#commitCard").content,s=c.querySelector(".commit__link"),a=c.querySelector(".commit__date"),f=c.querySelector(".commit__photo"),l=c.querySelector(".commit__name"),p=c.querySelector(".commit__mail"),v=c.querySelector(".commit__text-content");function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function y(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function m(t){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function g(t,e){return(g=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}document.querySelector("#commitCard").content.querySelector(".commit__link");var b=function(t){function e(t,n,r,o,i,u){var c;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(c=y(this,m(e).call(this))).commitLink=t,c.date=n,c.imgLink=r,c.name=o,c.mail=i,c.commit=u,c.createCard(),c}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&g(t,e)}(e,t),n=e,(r=[{key:"createCard",value:function(){var t=document.querySelector("#commitCard").content;s.href=this.commitLink,a.textContent=this.date,f.src=this.imgLink,l.textContent=this.name,p.textContent=this.mail,v.textContent=this.commit;var e=t.cloneNode(!0);return console.log("CardElement",e),e}}])&&h(n.prototype,r),o&&h(n,o),e}(u.a),w={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,swipeThreshold:80,dragThreshold:120,perTouch:!1,touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",throttle:10,direction:"ltr",peek:0,breakpoints:{},classes:{direction:{ltr:"glide--ltr",rtl:"glide--rtl"},slider:"glide--slider",carousel:"glide--carousel",swipeable:"glide--swipeable",dragging:"glide--dragging",cloneSlide:"glide__slide--clone",activeNav:"glide__bullet--active",activeSlide:"glide__slide--active",disabledArrow:"glide__arrow--disabled"}};function x(t){console.error("[Glide warn]: "+t)}var S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},O=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),j=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},k=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var u=o.get;return void 0!==u?u.call(r):void 0},T=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e};function P(t){return parseInt(t)}function E(t){return"string"==typeof t}function A(t){var e=void 0===t?"undefined":S(t);return"function"===e||"object"===e&&!!t}function C(t){return"function"==typeof t}function L(t){return void 0===t}function M(t){return t.constructor===Array}function H(t,e,n){var r={};for(var o in e)C(e[o])?r[o]=e[o](t,r,n):x("Extension must be a function");for(var i in r)C(r[i].mount)&&r[i].mount();return r}function I(t,e,n){Object.defineProperty(t,e,n)}function R(t,e){var n=j({},t,e);return e.hasOwnProperty("classes")&&(n.classes=j({},t.classes,e.classes),e.classes.hasOwnProperty("direction")&&(n.classes.direction=j({},t.classes.direction,e.classes.direction))),e.hasOwnProperty("breakpoints")&&(n.breakpoints=j({},t.breakpoints,e.breakpoints)),n}var z=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_(this,t),this.events=e,this.hop=e.hasOwnProperty}return O(t,[{key:"on",value:function(t,e){if(M(t))for(var n=0;n<t.length;n++)this.on(t[n],e);this.hop.call(this.events,t)||(this.events[t]=[]);var r=this.events[t].push(e)-1;return{remove:function(){delete this.events[t][r]}}}},{key:"emit",value:function(t,e){if(M(t))for(var n=0;n<t.length;n++)this.emit(t[n],e);this.hop.call(this.events,t)&&this.events[t].forEach((function(t){t(e||{})}))}}]),t}(),N=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_(this,t),this._c={},this._t=[],this._e=new z,this.disabled=!1,this.selector=e,this.settings=R(w,n),this.index=this.settings.startAt}return O(t,[{key:"mount",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._e.emit("mount.before"),A(t)?this._c=H(this,t,this._e):x("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return M(t)?this._t=t:x("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.settings=R(this.settings,t),t.hasOwnProperty("startAt")&&(this.index=t.startAt),this._e.emit("update"),this}},{key:"go",value:function(t){return this._c.Run.make(t),this}},{key:"move",value:function(t){return this._c.Transition.disable(),this._c.Move.make(t),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return t&&(this.settings.autoplay=t),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(t,e){return this._e.on(t,e),this}},{key:"isType",value:function(t){return this.settings.type===t}},{key:"settings",get:function(){return this._o},set:function(t){A(t)?this._o=t:x("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(t){this._i=P(t)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(t){this._d=!!t}}]),t}();function q(){return(new Date).getTime()}function D(t,e,n){var r=void 0,o=void 0,i=void 0,u=void 0,c=0;n||(n={});var s=function(){c=!1===n.leading?0:q(),r=null,u=t.apply(o,i),r||(o=i=null)},a=function(){var a=q();c||!1!==n.leading||(c=a);var f=e-(a-c);return o=this,i=arguments,f<=0||f>e?(r&&(clearTimeout(r),r=null),c=a,u=t.apply(o,i),r||(o=i=null)):r||!1===n.trailing||(r=setTimeout(s,f)),u};return a.cancel=function(){clearTimeout(r),c=0,r=o=i=null},a}var F={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function G(t){if(t&&t.parentNode){for(var e=t.parentNode.firstChild,n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}return[]}function V(t){return!!(t&&t instanceof window.HTMLElement)}var B=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_(this,t),this.listeners=e}return O(t,[{key:"on",value:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];E(t)&&(t=[t]);for(var o=0;o<t.length;o++)this.listeners[t[o]]=n,e.addEventListener(t[o],this.listeners[t[o]],r)}},{key:"off",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];E(t)&&(t=[t]);for(var r=0;r<t.length;r++)e.removeEventListener(t[r],this.listeners[t[r]],n)}},{key:"destroy",value:function(){delete this.listeners}}]),t}();var W=["ltr","rtl"],Y={">":"<","<":">","=":"="};function J(t,e){return{modify:function(t){return e.Direction.is("rtl")?-t:t}}}function U(t,e){return{modify:function(n){return n+e.Gaps.value*t.index}}}function K(t,e){return{modify:function(t){return t+e.Clones.grow/2}}}function $(t,e){return{modify:function(n){if(t.settings.focusAt>=0){var r=e.Peek.value;return A(r)?n-r.before:n-r}return n}}}function Q(t,e){return{modify:function(n){var r=e.Gaps.value,o=e.Sizes.width,i=t.settings.focusAt,u=e.Sizes.slideWidth;return"center"===i?n-(o/2-u/2):n-u*i-r*i}}}var X=!1;try{var Z=Object.defineProperty({},"passive",{get:function(){X=!0}});window.addEventListener("testPassive",null,Z),window.removeEventListener("testPassive",null,Z)}catch(t){}var tt=X;function et(t,e,n){var r=new B,o=!!tt&&{passive:!0},i={mount:function(){this._n=e.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=e.Html.root.querySelectorAll('[data-glide-el^="controls"]'),this.addBindings()},setActive:function(){for(var t=0;t<this._n.length;t++)this.addClass(this._n[t].children)},removeActive:function(){for(var t=0;t<this._n.length;t++)this.removeClass(this._n[t].children)},addClass:function(e){var n=t.settings,r=e[t.index];r&&(r.classList.add(n.classes.activeNav),G(r).forEach((function(t){t.classList.remove(n.classes.activeNav)})))},removeClass:function(e){var n=e[t.index];n&&n.classList.remove(t.settings.classes.activeNav)},addBindings:function(){for(var t=0;t<this._c.length;t++)this.bind(this._c[t].children)},removeBindings:function(){for(var t=0;t<this._c.length;t++)this.unbind(this._c[t].children)},bind:function(t){for(var e=0;e<t.length;e++)r.on("click",t[e],this.click),r.on("touchstart",t[e],this.click,o)},unbind:function(t){for(var e=0;e<t.length;e++)r.off(["click","touchstart"],t[e])},click:function(t){t.preventDefault(),e.Run.make(e.Direction.resolve(t.currentTarget.getAttribute("data-glide-dir")))}};return I(i,"items",{get:function(){return i._c}}),n.on(["mount.after","move.after"],(function(){i.setActive()})),n.on("destroy",(function(){i.removeBindings(),i.removeActive(),r.destroy()})),i}function nt(t){return A(t)?(e=t,Object.keys(e).sort().reduce((function(t,n){return t[n]=e[n],t[n],t}),{})):(x("Breakpoints option must be an object"),{});var e}function rt(t,e,n){var r=new B,o=t.settings,i=nt(o.breakpoints),u=j({},o),c={match:function(t){if(void 0!==window.matchMedia)for(var e in t)if(t.hasOwnProperty(e)&&window.matchMedia("(max-width: "+e+"px)").matches)return t[e];return u}};return j(o,c.match(i)),r.on("resize",window,D((function(){t.settings=R(o,c.match(i))}),t.settings.throttle)),n.on("update",(function(){i=nt(i),u=j({},o)})),n.on("destroy",(function(){r.off("resize",window)})),c}var ot,it={Html:function(t,e){var n={mount:function(){this.root=t.selector,this.track=this.root.querySelector('[data-glide-el="track"]'),this.slides=Array.prototype.slice.call(this.wrapper.children).filter((function(e){return!e.classList.contains(t.settings.classes.cloneSlide)}))}};return I(n,"root",{get:function(){return n._r},set:function(t){E(t)&&(t=document.querySelector(t)),V(t)?n._r=t:x("Root element must be a existing Html node")}}),I(n,"track",{get:function(){return n._t},set:function(t){V(t)?n._t=t:x('Could not find track element. Please use [data-glide-el="track"] attribute.')}}),I(n,"wrapper",{get:function(){return n.track.children[0]}}),n},Translate:function(t,e,n){var r={set:function(n){var r=function(t,e,n){var r=[U,K,$,Q].concat(t._t,[J]);return{mutate:function(o){for(var i=0;i<r.length;i++){var u=r[i];C(u)&&C(u().modify)?o=u(t,e,n).modify(o):x("Transformer should be a function that returns an object with `modify()` method")}return o}}}(t,e).mutate(n);e.Html.wrapper.style.transform="translate3d("+-1*r+"px, 0px, 0px)"},remove:function(){e.Html.wrapper.style.transform=""}};return n.on("move",(function(o){var i=e.Gaps.value,u=e.Sizes.length,c=e.Sizes.slideWidth;return t.isType("carousel")&&e.Run.isOffset("<")?(e.Transition.after((function(){n.emit("translate.jump"),r.set(c*(u-1))})),r.set(-c-i*u)):t.isType("carousel")&&e.Run.isOffset(">")?(e.Transition.after((function(){n.emit("translate.jump"),r.set(0)})),r.set(c*u+i*u)):r.set(o.movement)})),n.on("destroy",(function(){r.remove()})),r},Transition:function(t,e,n){var r=!1,o={compose:function(e){var n=t.settings;return r?e+" 0ms "+n.animationTimingFunc:e+" "+this.duration+"ms "+n.animationTimingFunc},set:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";e.Html.wrapper.style.transition=this.compose(t)},remove:function(){e.Html.wrapper.style.transition=""},after:function(t){setTimeout((function(){t()}),this.duration)},enable:function(){r=!1,this.set()},disable:function(){r=!0,this.set()}};return I(o,"duration",{get:function(){var n=t.settings;return t.isType("slider")&&e.Run.offset?n.rewindDuration:n.animationDuration}}),n.on("move",(function(){o.set()})),n.on(["build.before","resize","translate.jump"],(function(){o.disable()})),n.on("run",(function(){o.enable()})),n.on("destroy",(function(){o.remove()})),o},Direction:function(t,e,n){var r={mount:function(){this.value=t.settings.direction},resolve:function(t){var e=t.slice(0,1);return this.is("rtl")?t.split(e).join(Y[e]):t},is:function(t){return this.value===t},addClass:function(){e.Html.root.classList.add(t.settings.classes.direction[this.value])},removeClass:function(){e.Html.root.classList.remove(t.settings.classes.direction[this.value])}};return I(r,"value",{get:function(){return r._v},set:function(t){W.indexOf(t)>-1?r._v=t:x("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],(function(){r.removeClass()})),n.on("update",(function(){r.mount()})),n.on(["build.before","update"],(function(){r.addClass()})),r},Peek:function(t,e,n){var r={mount:function(){this.value=t.settings.peek}};return I(r,"value",{get:function(){return r._v},set:function(t){A(t)?(t.before=P(t.before),t.after=P(t.after)):t=P(t),r._v=t}}),I(r,"reductor",{get:function(){var e=r.value,n=t.settings.perView;return A(e)?e.before/n+e.after/n:2*e/n}}),n.on(["resize","update"],(function(){r.mount()})),r},Sizes:function(t,e,n){var r={setupSlides:function(){for(var t=this.slideWidth+"px",n=e.Html.slides,r=0;r<n.length;r++)n[r].style.width=t},setupWrapper:function(t){e.Html.wrapper.style.width=this.wrapperSize+"px"},remove:function(){for(var t=e.Html.slides,n=0;n<t.length;n++)t[n].style.width="";e.Html.wrapper.style.width=""}};return I(r,"length",{get:function(){return e.Html.slides.length}}),I(r,"width",{get:function(){return e.Html.root.offsetWidth}}),I(r,"wrapperSize",{get:function(){return r.slideWidth*r.length+e.Gaps.grow+e.Clones.grow}}),I(r,"slideWidth",{get:function(){return r.width/t.settings.perView-e.Peek.reductor-e.Gaps.reductor}}),n.on(["build.before","resize","update"],(function(){r.setupSlides(),r.setupWrapper()})),n.on("destroy",(function(){r.remove()})),r},Gaps:function(t,e,n){var r={apply:function(t){for(var n=0,r=t.length;n<r;n++){var o=t[n].style,i=e.Direction.value;o[F[i][0]]=0!==n?this.value/2+"px":"",n!==t.length-1?o[F[i][1]]=this.value/2+"px":o[F[i][1]]=""}},remove:function(t){for(var e=0,n=t.length;e<n;e++){var r=t[e].style;r.marginLeft="",r.marginRight=""}}};return I(r,"value",{get:function(){return P(t.settings.gap)}}),I(r,"grow",{get:function(){return r.value*(e.Sizes.length-1)}}),I(r,"reductor",{get:function(){var e=t.settings.perView;return r.value*(e-1)/e}}),n.on(["build.after","update"],D((function(){r.apply(e.Html.wrapper.children)}),30)),n.on("destroy",(function(){r.remove(e.Html.wrapper.children)})),r},Move:function(t,e,n){var r={mount:function(){this._o=0},make:function(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.offset=r,n.emit("move",{movement:this.value}),e.Transition.after((function(){n.emit("move.after",{movement:t.value})}))}};return I(r,"offset",{get:function(){return r._o},set:function(t){r._o=L(t)?0:P(t)}}),I(r,"translate",{get:function(){return e.Sizes.slideWidth*t.index}}),I(r,"value",{get:function(){var t=this.offset,n=this.translate;return e.Direction.is("rtl")?n+t:n-t}}),n.on(["build.before","run"],(function(){r.make()})),r},Clones:function(t,e,n){var r={mount:function(){this.items=[],t.isType("carousel")&&(this.items=this.collect())},collect:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=e.Html.slides,o=t.settings,i=o.perView,u=o.classes,c=+!!t.settings.peek,s=i+c,a=r.slice(0,s),f=r.slice(-s),l=0;l<Math.max(1,Math.floor(i/r.length));l++){for(var p=0;p<a.length;p++){var v=a[p].cloneNode(!0);v.classList.add(u.cloneSlide),n.push(v)}for(var d=0;d<f.length;d++){var h=f[d].cloneNode(!0);h.classList.add(u.cloneSlide),n.unshift(h)}}return n},append:function(){for(var t=this.items,n=e.Html,r=n.wrapper,o=n.slides,i=Math.floor(t.length/2),u=t.slice(0,i).reverse(),c=t.slice(i,t.length),s=e.Sizes.slideWidth+"px",a=0;a<c.length;a++)r.appendChild(c[a]);for(var f=0;f<u.length;f++)r.insertBefore(u[f],o[0]);for(var l=0;l<t.length;l++)t[l].style.width=s},remove:function(){for(var t=this.items,n=0;n<t.length;n++)e.Html.wrapper.removeChild(t[n])}};return I(r,"grow",{get:function(){return(e.Sizes.slideWidth+e.Gaps.value)*r.items.length}}),n.on("update",(function(){r.remove(),r.mount(),r.append()})),n.on("build.before",(function(){t.isType("carousel")&&r.append()})),n.on("destroy",(function(){r.remove()})),r},Resize:function(t,e,n){var r=new B,o={mount:function(){this.bind()},bind:function(){r.on("resize",window,D((function(){n.emit("resize")}),t.settings.throttle))},unbind:function(){r.off("resize",window)}};return n.on("destroy",(function(){o.unbind(),r.destroy()})),o},Build:function(t,e,n){var r={mount:function(){n.emit("build.before"),this.typeClass(),this.activeClass(),n.emit("build.after")},typeClass:function(){e.Html.root.classList.add(t.settings.classes[t.settings.type])},activeClass:function(){var n=t.settings.classes,r=e.Html.slides[t.index];r&&(r.classList.add(n.activeSlide),G(r).forEach((function(t){t.classList.remove(n.activeSlide)})))},removeClasses:function(){var n=t.settings.classes;e.Html.root.classList.remove(n[t.settings.type]),e.Html.slides.forEach((function(t){t.classList.remove(n.activeSlide)}))}};return n.on(["destroy","update"],(function(){r.removeClasses()})),n.on(["resize","update"],(function(){r.mount()})),n.on("move.after",(function(){r.activeClass()})),r},Run:function(t,e,n){var r={mount:function(){this._o=!1},make:function(r){var o=this;t.disabled||(t.disable(),this.move=r,n.emit("run.before",this.move),this.calculate(),n.emit("run",this.move),e.Transition.after((function(){o.isStart()&&n.emit("run.start",o.move),o.isEnd()&&n.emit("run.end",o.move),(o.isOffset("<")||o.isOffset(">"))&&(o._o=!1,n.emit("run.offset",o.move)),n.emit("run.after",o.move),t.enable()})))},calculate:function(){var e=this.move,n=this.length,r=e.steps,o=e.direction,i="number"==typeof P(r)&&0!==P(r);switch(o){case">":">"===r?t.index=n:this.isEnd()?t.isType("slider")&&!t.settings.rewind||(this._o=!0,t.index=0):i?t.index+=Math.min(n-t.index,-P(r)):t.index++;break;case"<":"<"===r?t.index=0:this.isStart()?t.isType("slider")&&!t.settings.rewind||(this._o=!0,t.index=n):i?t.index-=Math.min(t.index,P(r)):t.index--;break;case"=":t.index=r;break;default:x("Invalid direction pattern ["+o+r+"] has been used")}},isStart:function(){return 0===t.index},isEnd:function(){return t.index===this.length},isOffset:function(t){return this._o&&this.move.direction===t}};return I(r,"move",{get:function(){return this._m},set:function(t){var e=t.substr(1);this._m={direction:t.substr(0,1),steps:e?P(e)?P(e):e:0}}}),I(r,"length",{get:function(){var n=t.settings,r=e.Html.slides.length;return t.isType("slider")&&"center"!==n.focusAt&&n.bound?r-1-(P(n.perView)-1)+P(n.focusAt):r-1}}),I(r,"offset",{get:function(){return this._o}}),r}},ut=function(t){function e(){return _(this,e),T(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),O(e,[{key:"mount",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return k(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"mount",this).call(this,j({},it,t))}}]),e}(N);function ct(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var st=(ct(ot={type:"carousel",startAt:"center",peek:88,gap:16},"startAt",1),ct(ot,"perView",4),ct(ot,"wrapperSize",100),ct(ot,"breakpoints",{480:{perView:1,type:"slider",peek:{before:16,after:40}},768:{perView:1,type:"slider",peek:{before:16,after:40}},1200:{perView:2,type:"slider",startAt:1,peek:{before:40,after:40}},1440:{perView:3}}),ot);function at(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.renderCommits()}var e,n,r;return e=t,(n=[{key:"renderCommits",value:function(){o.getAllCommits().then((function(t){t.forEach((function(t){var e=new b(t.html_url,t.committer.date,t.author.avatar_url,t.author.login,t.author.email,t.commit.message).createCard();i.c.appendChild(e)}))})).then((function(){return new ut(".glide",st).mount({Breakpoints:rt,Controls:et})})).catch((function(t){return console.log(t)}))}}])&&at(e.prototype,n),r&&at(e,r),t}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,