!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=141)}([function(t,e,n){"use strict";n.d(e,"f",(function(){return r})),n.d(e,"l",(function(){return o})),n.d(e,"n",(function(){return i})),n.d(e,"b",(function(){return c})),n.d(e,"i",(function(){return u})),n.d(e,"m",(function(){return a})),n.d(e,"o",(function(){return s})),n.d(e,"k",(function(){return f})),n.d(e,"e",(function(){return l})),n.d(e,"g",(function(){return p})),n.d(e,"a",(function(){return v})),n.d(e,"j",(function(){return d})),n.d(e,"h",(function(){return h})),n.d(e,"c",(function(){return y})),n.d(e,"d",(function(){return g}));n(51),n(66);var r=document.querySelector(".searching__error"),o=document.forms.search,i=document.querySelector(".searching-form__button"),c=document.querySelector(".card-list"),u=document.querySelector(".cards__container"),a=document.querySelector(".button__show-more"),s=document.querySelector(".waiting"),f=document.querySelector(".nothing"),l=document.querySelector(".graph__rows"),p=document.getElementById("bottomLoader"),v=document.getElementById("askHeading"),d=document.getElementById("newsPerWeek"),h=document.getElementById("mentionsInHeadings"),y=document.getElementById("currentMonth"),g=document.querySelector(".error__popup")},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(71))},function(t,e,n){var r=n(1),o=n(14),i=n(36),c=n(57),u=r.Symbol,a=o("wks");t.exports=function(t){return a[t]||(a[t]=c&&u[t]||(c?u:i)("Symbol."+t))}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var r=n(10),o=n(9),i=n(17);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(1),o=n(26).f,i=n(6),c=n(13),u=n(32),a=n(53),s=n(56);t.exports=function(t,e){var n,f,l,p,v,d=t.target,h=t.global,y=t.stat;if(n=h?r:y?r[d]||u(d,{}):(r[d]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(v=o(n,f))&&v.value:n[f],!s(h?f:d+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),c(n,f,p,t)}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(10),o=n(45),i=n(5),c=n(23),u=Object.defineProperty;e.f=r?u:function(t,e,n){if(i(t),e=c(e,!0),i(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(39),o=n(18);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(1),o=n(14),i=n(6),c=n(8),u=n(32),a=n(46),s=n(24),f=s.get,l=s.enforce,p=String(a).split("toString");o("inspectSource",(function(t){return a.call(t)})),(t.exports=function(t,e,n,o){var a=!!o&&!!o.unsafe,s=!!o&&!!o.enumerable,f=!!o&&!!o.noTargetGet;"function"==typeof n&&("string"!=typeof e||c(n,"name")||i(n,"name",e),l(n).source=p.join("string"==typeof e?e:"")),t!==r?(a?!f&&t[e]&&(s=!0):delete t[e],s?t[e]=n:i(t,e,n)):s?t[e]=n:u(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||a.call(this)}))},function(t,e,n){var r=n(21),o=n(72);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.4.1",mode:r?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(54),o=n(1),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,"a",(function(){return o}));var o=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,o;return e=t,(n=[{key:"setData",value:function(t){for(var e in t)localStorage.setItem(e,JSON.stringify(t[e]))}},{key:"getItem",value:function(t){return t?JSON.parse(localStorage.getItem(t)):console.log("В LocalStorage по ключу ".concat(t," ничего нет"))}}])&&r(e.prototype,n),o&&r(e,o),t}())},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(37),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(18);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=!1},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));n(69);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=new(function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentDate=new Date,this.date=e||this.currentDate}var e,n,o;return e=t,(n=[{key:"getISODate",value:function(){return this.date=this.date.toISOString()}},{key:"getNormalTime",value:function(){var t=new Date(this.date),e=t.getFullYear(),n=t.getMonth(),r=t.getDate();return"".concat(r," ").concat(["января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"][n],", ").concat(e)}},{key:"getNumOfWeekday",value:function(){var t=new Date(this.date).getDay();return this.date.getDate()+", "+["вс","пн","вт","ср","чт","пт","сб"][t]}},{key:"getMonthAsText",value:function(){return["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"][new Date(this.date).getMonth()]}},{key:"getDateNDaysAgo",value:function(t){var e=new Date(this.date);return e.setDate(e.getDate()-t),new Date(e)}},{key:"getDatesForPeriod",value:function(t){for(var e=[],n=t-1;n>=0;n--)e.push(this.getDateNDaysAgo(n));return e}}])&&r(e.prototype,n),o&&r(e,o),t}())},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r,o,i,c=n(73),u=n(1),a=n(4),s=n(6),f=n(8),l=n(27),p=n(25),v=u.WeakMap;if(c){var d=new v,h=d.get,y=d.has,g=d.set;r=function(t,e){return g.call(d,t,e),e},o=function(t){return h.call(d,t)||{}},i=function(t){return y.call(d,t)}}else{var m=l("state");p[m]=!0,r=function(t,e){return s(t,m,e),e},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!a(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e){t.exports={}},function(t,e,n){var r=n(10),o=n(52),i=n(17),c=n(12),u=n(23),a=n(8),s=n(45),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=c(t),e=u(e,!0),s)try{return f(t,e)}catch(t){}if(a(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e,n){var r=n(14),o=n(36),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,n){"use strict";var r,o,i=n(75),c=RegExp.prototype.exec,u=String.prototype.replace,a=c,s=(r=/a/,o=/b*/g,c.call(r,"a"),c.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(a=function(t){var e,n,r,o,a=this;return f&&(n=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),s&&(e=a.lastIndex),r=c.call(a,t),s&&r&&(a.lastIndex=a.global?r.index+r[0].length:e),f&&r&&r.length>1&&u.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=a},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r=n(11);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0);function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=new(function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.error=e}var e,n,i;return e=t,(n=[{key:"showError",value:function(){r.d.textContent=this.error,r.d.classList.add("error__popup_shown"),setTimeout((function(){return r.d.classList.remove("error__popup_shown")}),6e3)}}])&&o(e.prototype,n),i&&o(e,i),t}())},function(t,e,n){var r=n(1),o=n(6);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e){t.exports={}},function(t,e,n){var r=n(1),o=n(4),i=r.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r,o,i=n(1),c=n(60),u=i.process,a=u&&u.versions,s=a&&a.v8;s?o=(r=s.split("."))[0]+r[1]:c&&(!(r=c.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=c.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){var r=n(3),o=n(11),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(47),o=n(33).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(9).f,o=n(8),i=n(2)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(29);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(5),o=n(84),i=n(33),c=n(25),u=n(59),a=n(35),s=n(27)("IE_PROTO"),f=function(){},l=function(){var t,e=a("iframe"),n=i.length;for(e.style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;n--;)delete l.prototype[i[n]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=r(t),n=new f,f.prototype=null,n[s]=t):n=l(),void 0===e?n:o(n,e)},c[s]=!0},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));n(97),n(99);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.elem=n,this._setHandlers(e)}var e,n,o;return e=t,(n=[{key:"_setHandlers",value:function(t){var e=this;t&&t.forEach((function(t){var n=t.event,r=t.func;e.elem.addEventListener(n,r)}))}}])&&r(e.prototype,n),o&&r(e,o),t}()},function(t,e,n){var r=n(10),o=n(3),i=n(35);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(14);t.exports=r("native-function-to-string",Function.toString)},function(t,e,n){var r=n(8),o=n(12),i=n(64).indexOf,c=n(25);t.exports=function(t,e){var n,u=o(t),a=0,s=[];for(n in u)!r(c,n)&&r(u,n)&&s.push(n);for(;e.length>a;)r(u,n=e[a++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(42),o=n(39),i=n(20),c=n(19),u=n(49),a=[].push,s=function(t){var e=1==t,n=2==t,s=3==t,f=4==t,l=6==t,p=5==t||l;return function(v,d,h,y){for(var g,m,b=i(v),x=o(b),w=r(d,h,3),_=c(x.length),S=0,j=y||u,O=e?j(v,_):n?j(v,0):void 0;_>S;S++)if((p||S in x)&&(m=w(g=x[S],S,b),t))if(e)O[S]=m;else if(m)switch(t){case 3:return!0;case 5:return g;case 6:return S;case 2:a.call(O,g)}else if(f)return!1;return l?-1:s||f?f:O}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,e,n){var r=n(4),o=n(30),i=n(2)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(3),o=n(2),i=n(38),c=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[c]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){"use strict";var r=n(7),o=n(28);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(8),o=n(74),i=n(26),c=n(9);t.exports=function(t,e){for(var n=o(e),u=c.f,a=i.f,s=0;s<n.length;s++){var f=n[s];r(t,f)||u(t,f,a(e,f))}}},function(t,e,n){t.exports=n(1)},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(3),o=/#|\.prototype\./,i=function(t,e){var n=u[c(t)];return n==s||n!=a&&("function"==typeof e?r(e):!!e)},c=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=i.data={},a=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(13),o=n(104),i=Object.prototype;o!==i.toString&&r(i,"toString",o,{unsafe:!0})},function(t,e,n){var r=n(15);t.exports=r("document","documentElement")},function(t,e,n){var r=n(15);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r=n(47),o=n(33);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){"use strict";var r=n(12),o=n(89),i=n(34),c=n(24),u=n(90),a=c.set,s=c.getterFor("Array Iterator");t.exports=u(Array,"Array",(function(t,e){a(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=s(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e,n){var r=n(8),o=n(20),i=n(27),c=n(92),u=i("IE_PROTO"),a=Object.prototype;t.exports=c?Object.getPrototypeOf:function(t){return t=o(t),r(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(12),o=n(19),i=n(65),c=function(t){return function(e,n,c){var u,a=r(e),s=o(a.length),f=i(c,s);if(t&&n!=n){for(;s>f;)if((u=a[f++])!=u)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},function(t,e,n){var r=n(37),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e,n){"use strict";var r=n(67),o=n(5),i=n(18),c=n(76),u=n(68);r("search",1,(function(t,e,n){return[function(e){var n=i(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var i=o(t),a=String(this),s=i.lastIndex;c(s,0)||(i.lastIndex=0);var f=u(i,a);return c(i.lastIndex,s)||(i.lastIndex=s),null===f?-1:f.index}]}))},function(t,e,n){"use strict";var r=n(6),o=n(13),i=n(3),c=n(2),u=n(28),a=c("species"),s=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,l){var p=c(t),v=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),d=v&&!i((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[a]=function(){return n},n.flags="",n[p]=/./[p]),n.exec=function(){return e=!0,null},n[p](""),!e}));if(!v||!d||"replace"===t&&!s||"split"===t&&!f){var h=/./[p],y=n(p,""[t],(function(t,e,n,r,o){return e.exec===u?v&&!o?{done:!0,value:h.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),g=y[0],m=y[1];o(String.prototype,t,g),o(RegExp.prototype,p,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)}),l&&r(RegExp.prototype[p],"sham",!0)}}},function(t,e,n){var r=n(11),o=n(28);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,n){"use strict";var r=n(7),o=n(3),i=n(30),c=n(4),u=n(20),a=n(19),s=n(70),f=n(49),l=n(50),p=n(2),v=n(38),d=p("isConcatSpreadable"),h=v>=51||!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),y=l("concat"),g=function(t){if(!c(t))return!1;var e=t[d];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!h||!y},{concat:function(t){var e,n,r,o,i,c=u(this),l=f(c,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(i=-1===e?c:arguments[e],g(i)){if(p+(o=a(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in i&&s(l,p,i[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(l,p++,i)}return l.length=p,l}})},function(t,e,n){"use strict";var r=n(23),o=n(9),i=n(17);t.exports=function(t,e,n){var c=r(e);c in t?o.f(t,c,i(0,n)):t[c]=n}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(1),o=n(32),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,n){var r=n(1),o=n(46),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o.call(i))},function(t,e,n){var r=n(15),o=n(40),i=n(55),c=n(5);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(c(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";var r=n(5);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!n||!r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){var r=n(11),o=n(2)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(c=r(e))&&"function"==typeof e.callee?"Arguments":c}},function(t,e,n){var r=n(5),o=n(29),i=n(2)("species");t.exports=function(t,e){var n,c=r(t).constructor;return void 0===c||null==(n=r(c)[i])?e:o(n)}},function(t,e,n){var r,o,i,c=n(1),u=n(3),a=n(11),s=n(42),f=n(59),l=n(35),p=n(81),v=c.location,d=c.setImmediate,h=c.clearImmediate,y=c.process,g=c.MessageChannel,m=c.Dispatch,b=0,x={},w=function(t){if(x.hasOwnProperty(t)){var e=x[t];delete x[t],e()}},_=function(t){return function(){w(t)}},S=function(t){w(t.data)},j=function(t){c.postMessage(t+"",v.protocol+"//"+v.host)};d&&h||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return x[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete x[t]},"process"==a(y)?r=function(t){y.nextTick(_(t))}:m&&m.now?r=function(t){m.now(_(t))}:g&&!p?(i=(o=new g).port2,o.port1.onmessage=S,r=s(i.postMessage,i,1)):!c.addEventListener||"function"!=typeof postMessage||c.importScripts||u(j)?r="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),w(t)}}:function(t){setTimeout(_(t),0)}:(r=j,c.addEventListener("message",S,!1))),t.exports={set:d,clear:h}},function(t,e,n){var r=n(60);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){"use strict";var r=n(29),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){"use strict";var r=n(7),o=n(1),i=n(15),c=n(21),u=n(10),a=n(57),s=n(3),f=n(8),l=n(30),p=n(4),v=n(5),d=n(20),h=n(12),y=n(23),g=n(17),m=n(43),b=n(61),x=n(40),w=n(116),_=n(55),S=n(26),j=n(9),O=n(52),P=n(6),E=n(13),L=n(14),T=n(27),k=n(25),I=n(36),A=n(2),C=n(85),R=n(86),D=n(41),M=n(24),N=n(48).forEach,q=T("hidden"),F=A("toPrimitive"),B=M.set,G=M.getterFor("Symbol"),H=Object.prototype,V=o.Symbol,z=i("JSON","stringify"),W=S.f,J=j.f,$=w.f,U=O.f,Y=L("symbols"),K=L("op-symbols"),Q=L("string-to-symbol-registry"),X=L("symbol-to-string-registry"),Z=L("wks"),tt=o.QObject,et=!tt||!tt.prototype||!tt.prototype.findChild,nt=u&&s((function(){return 7!=m(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=W(H,e);r&&delete H[e],J(t,e,n),r&&t!==H&&J(H,e,r)}:J,rt=function(t,e){var n=Y[t]=m(V.prototype);return B(n,{type:"Symbol",tag:t,description:e}),u||(n.description=e),n},ot=a&&"symbol"==typeof V.iterator?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof V},it=function(t,e,n){t===H&&it(K,e,n),v(t);var r=y(e,!0);return v(n),f(Y,r)?(n.enumerable?(f(t,q)&&t[q][r]&&(t[q][r]=!1),n=m(n,{enumerable:g(0,!1)})):(f(t,q)||J(t,q,g(1,{})),t[q][r]=!0),nt(t,r,n)):J(t,r,n)},ct=function(t,e){v(t);var n=h(e),r=b(n).concat(ft(n));return N(r,(function(e){u&&!ut.call(n,e)||it(t,e,n[e])})),t},ut=function(t){var e=y(t,!0),n=U.call(this,e);return!(this===H&&f(Y,e)&&!f(K,e))&&(!(n||!f(this,e)||!f(Y,e)||f(this,q)&&this[q][e])||n)},at=function(t,e){var n=h(t),r=y(e,!0);if(n!==H||!f(Y,r)||f(K,r)){var o=W(n,r);return!o||!f(Y,r)||f(n,q)&&n[q][r]||(o.enumerable=!0),o}},st=function(t){var e=$(h(t)),n=[];return N(e,(function(t){f(Y,t)||f(k,t)||n.push(t)})),n},ft=function(t){var e=t===H,n=$(e?K:h(t)),r=[];return N(n,(function(t){!f(Y,t)||e&&!f(H,t)||r.push(Y[t])})),r};(a||(E((V=function(){if(this instanceof V)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=I(t),n=function(t){this===H&&n.call(K,t),f(this,q)&&f(this[q],e)&&(this[q][e]=!1),nt(this,e,g(1,t))};return u&&et&&nt(H,e,{configurable:!0,set:n}),rt(e,t)}).prototype,"toString",(function(){return G(this).tag})),O.f=ut,j.f=it,S.f=at,x.f=w.f=st,_.f=ft,u&&(J(V.prototype,"description",{configurable:!0,get:function(){return G(this).description}}),c||E(H,"propertyIsEnumerable",ut,{unsafe:!0})),C.f=function(t){return rt(A(t),t)}),r({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:V}),N(b(Z),(function(t){R(t)})),r({target:"Symbol",stat:!0,forced:!a},{for:function(t){var e=String(t);if(f(Q,e))return Q[e];var n=V(e);return Q[e]=n,X[n]=e,n},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(f(X,t))return X[t]},useSetter:function(){et=!0},useSimple:function(){et=!1}}),r({target:"Object",stat:!0,forced:!a,sham:!u},{create:function(t,e){return void 0===e?m(t):ct(m(t),e)},defineProperty:it,defineProperties:ct,getOwnPropertyDescriptor:at}),r({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:st,getOwnPropertySymbols:ft}),r({target:"Object",stat:!0,forced:s((function(){_.f(1)}))},{getOwnPropertySymbols:function(t){return _.f(d(t))}}),z)&&r({target:"JSON",stat:!0,forced:!a||s((function(){var t=V();return"[null]"!=z([t])||"{}"!=z({a:t})||"{}"!=z(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(p(e)||void 0!==t)&&!ot(t))return l(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!ot(e))return e}),o[1]=e,z.apply(null,o)}});V.prototype[F]||P(V.prototype,F,V.prototype.valueOf),D(V,"Symbol"),k[q]=!0},function(t,e,n){var r=n(10),o=n(9),i=n(5),c=n(61);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=c(e),u=r.length,a=0;u>a;)o.f(t,n=r[a++],e[n]);return t}},function(t,e,n){e.f=n(2)},function(t,e,n){var r=n(54),o=n(8),i=n(85),c=n(9).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||c(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(7),o=n(10),i=n(1),c=n(8),u=n(4),a=n(9).f,s=n(53),f=i.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};s(p,f);var v=p.prototype=f.prototype;v.constructor=p;var d=v.toString,h="Symbol(test)"==String(f("test")),y=/^Symbol\((.*)\)[^)]+$/;a(v,"description",{configurable:!0,get:function(){var t=u(this)?this.valueOf():this,e=d.call(t);if(c(l,t))return"";var n=h?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},function(t,e,n){n(86)("iterator")},function(t,e,n){var r=n(2),o=n(43),i=n(6),c=r("unscopables"),u=Array.prototype;null==u[c]&&i(u,c,o(null)),t.exports=function(t){u[c][t]=!0}},function(t,e,n){"use strict";var r=n(7),o=n(117),i=n(63),c=n(118),u=n(41),a=n(6),s=n(13),f=n(2),l=n(21),p=n(34),v=n(91),d=v.IteratorPrototype,h=v.BUGGY_SAFARI_ITERATORS,y=f("iterator"),g=function(){return this};t.exports=function(t,e,n,f,v,m,b){o(n,e,f);var x,w,_,S=function(t){if(t===v&&L)return L;if(!h&&t in P)return P[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},j=e+" Iterator",O=!1,P=t.prototype,E=P[y]||P["@@iterator"]||v&&P[v],L=!h&&E||S(v),T="Array"==e&&P.entries||E;if(T&&(x=i(T.call(new t)),d!==Object.prototype&&x.next&&(l||i(x)===d||(c?c(x,d):"function"!=typeof x[y]&&a(x,y,g)),u(x,j,!0,!0),l&&(p[j]=g))),"values"==v&&E&&"values"!==E.name&&(O=!0,L=function(){return E.call(this)}),l&&!b||P[y]===L||a(P,y,L),p[e]=L,v)if(w={values:S("values"),keys:m?L:S("keys"),entries:S("entries")},b)for(_ in w)!h&&!O&&_ in P||s(P,_,w[_]);else r({target:e,proto:!0,forced:h||O},w);return w}},function(t,e,n){"use strict";var r,o,i,c=n(63),u=n(6),a=n(8),s=n(2),f=n(21),l=s("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):p=!0),null==r&&(r={}),f||a(r,l)||u(r,l,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},function(t,e,n){var r=n(3);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(7),o=n(3),i=n(20),c=n(63),u=n(92);r({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!u},{getPrototypeOf:function(t){return c(i(t))}})},function(t,e,n){"use strict";var r=n(103).charAt,o=n(24),i=n(90),c=o.set,u=o.getterFor("String Iterator");i(String,"String",(function(t){c(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=u(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(1),o=n(96),i=n(62),c=n(6),u=n(2),a=u("iterator"),s=u("toStringTag"),f=i.values;for(var l in o){var p=r[l],v=p&&p.prototype;if(v){if(v[a]!==f)try{c(v,a,f)}catch(t){v[a]=f}if(v[s]||c(v,s,l),o[l])for(var d in i)if(v[d]!==i[d])try{c(v,d,i[d])}catch(t){v[d]=i[d]}}}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){"use strict";var r=n(7),o=n(98);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,n){"use strict";var r=n(48).forEach,o=n(77);t.exports=o("forEach")?function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(t,e,n){var r=n(1),o=n(96),i=n(98),c=n(6);for(var u in o){var a=r[u],s=a&&a.prototype;if(s&&s.forEach!==i)try{c(s,"forEach",i)}catch(t){s.forEach=i}}},function(t,e,n){"use strict";var r,o,i,c,u=n(7),a=n(21),s=n(1),f=n(15),l=n(101),p=n(13),v=n(105),d=n(14),h=n(41),y=n(106),g=n(4),m=n(29),b=n(107),x=n(11),w=n(108),_=n(112),S=n(79),j=n(80).set,O=n(113),P=n(102),E=n(114),L=n(82),T=n(115),k=n(24),I=n(56),A=n(2),C=n(38),R=A("species"),D="Promise",M=k.get,N=k.set,q=k.getterFor(D),F=l,B=s.TypeError,G=s.document,H=s.process,V=d("inspectSource"),z=f("fetch"),W=L.f,J=W,$="process"==x(H),U=!!(G&&G.createEvent&&s.dispatchEvent),Y=I(D,(function(){var t=V(F)!==String(F);if(66===C)return!0;if(!t&&!$&&"function"!=typeof PromiseRejectionEvent)return!0;if(a&&!F.prototype.finally)return!0;if(C>=51&&/native code/.test(F))return!1;var e=F.resolve(1),n=function(t){t((function(){}),(function(){}))};return(e.constructor={})[R]=n,!(e.then((function(){}))instanceof n)})),K=Y||!_((function(t){F.all(t).catch((function(){}))})),Q=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;O((function(){for(var o=e.value,i=1==e.state,c=0;r.length>c;){var u,a,s,f=r[c++],l=i?f.ok:f.fail,p=f.resolve,v=f.reject,d=f.domain;try{l?(i||(2===e.rejection&&nt(t,e),e.rejection=1),!0===l?u=o:(d&&d.enter(),u=l(o),d&&(d.exit(),s=!0)),u===f.promise?v(B("Promise-chain cycle")):(a=Q(u))?a.call(u,p,v):p(u)):v(o)}catch(t){d&&!s&&d.exit(),v(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&tt(t,e)}))}},Z=function(t,e,n){var r,o;U?((r=G.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),s.dispatchEvent(r)):r={promise:e,reason:n},(o=s["on"+t])?o(r):"unhandledrejection"===t&&E("Unhandled promise rejection",n)},tt=function(t,e){j.call(s,(function(){var n,r=e.value;if(et(e)&&(n=T((function(){$?H.emit("unhandledRejection",r,t):Z("unhandledrejection",t,r)})),e.rejection=$||et(e)?2:1,n.error))throw n.value}))},et=function(t){return 1!==t.rejection&&!t.parent},nt=function(t,e){j.call(s,(function(){$?H.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},rt=function(t,e,n,r){return function(o){t(e,n,o,r)}},ot=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,X(t,e,!0))},it=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw B("Promise can't be resolved itself");var o=Q(n);o?O((function(){var r={done:!1};try{o.call(n,rt(it,t,r,e),rt(ot,t,r,e))}catch(n){ot(t,r,n,e)}})):(e.value=n,e.state=1,X(t,e,!1))}catch(n){ot(t,{done:!1},n,e)}}};Y&&(F=function(t){b(this,F,D),m(t),r.call(this);var e=M(this);try{t(rt(it,this,e),rt(ot,this,e))}catch(t){ot(this,e,t)}},(r=function(t){N(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=v(F.prototype,{then:function(t,e){var n=q(this),r=W(S(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=$?H.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=M(t);this.promise=t,this.resolve=rt(it,t,e),this.reject=rt(ot,t,e)},L.f=W=function(t){return t===F||t===i?new o(t):J(t)},a||"function"!=typeof l||(c=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){c.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof z&&u({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return P(F,z.apply(s,arguments))}}))),u({global:!0,wrap:!0,forced:Y},{Promise:F}),h(F,D,!1,!0),y(D),i=f(D),u({target:D,stat:!0,forced:Y},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),u({target:D,stat:!0,forced:a||Y},{resolve:function(t){return P(a&&this===i?F:this,t)}}),u({target:D,stat:!0,forced:K},{all:function(t){var e=this,n=W(e),r=n.resolve,o=n.reject,i=T((function(){var n=m(e.resolve),i=[],c=0,u=1;w(t,(function(t){var a=c++,s=!1;i.push(void 0),u++,n.call(e,t).then((function(t){s||(s=!0,i[a]=t,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=W(e),r=n.reject,o=T((function(){var o=m(e.resolve);w(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r=n(1);t.exports=r.Promise},function(t,e,n){var r=n(5),o=n(4),i=n(82);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(37),o=n(18),i=function(t){return function(e,n){var i,c,u=String(o(e)),a=r(n),s=u.length;return a<0||a>=s?t?"":void 0:(i=u.charCodeAt(a))<55296||i>56319||a+1===s||(c=u.charCodeAt(a+1))<56320||c>57343?t?u.charAt(a):i:t?u.slice(a,a+2):c-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){"use strict";var r=n(78),o={};o[n(2)("toStringTag")]="z",t.exports="[object z]"!==String(o)?function(){return"[object "+r(this)+"]"}:o.toString},function(t,e,n){var r=n(13);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(15),o=n(9),i=n(2),c=n(10),u=i("species");t.exports=function(t){var e=r(t),n=o.f;c&&e&&!e[u]&&n(e,u,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(5),o=n(109),i=n(19),c=n(42),u=n(110),a=n(111),s=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,f,l){var p,v,d,h,y,g,m,b=c(e,n,f?2:1);if(l)p=t;else{if("function"!=typeof(v=u(t)))throw TypeError("Target is not iterable");if(o(v)){for(d=0,h=i(t.length);h>d;d++)if((y=f?b(r(m=t[d])[0],m[1]):b(t[d]))&&y instanceof s)return y;return new s(!1)}p=v.call(t)}for(g=p.next;!(m=g.call(p)).done;)if("object"==typeof(y=a(p,b,m.value,f))&&y&&y instanceof s)return y;return new s(!1)}).stop=function(t){return new s(!0,t)}},function(t,e,n){var r=n(2),o=n(34),i=r("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},function(t,e,n){var r=n(78),o=n(34),i=n(2)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(5);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(2)("iterator"),o=!1;try{var i=0,c={next:function(){return{done:!!i++}},return:function(){o=!0}};c[r]=function(){return this},Array.from(c,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r,o,i,c,u,a,s,f,l=n(1),p=n(26).f,v=n(11),d=n(80).set,h=n(81),y=l.MutationObserver||l.WebKitMutationObserver,g=l.process,m=l.Promise,b="process"==v(g),x=p(l,"queueMicrotask"),w=x&&x.value;w||(r=function(){var t,e;for(b&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?c():i=void 0,t}}i=void 0,t&&t.enter()},b?c=function(){g.nextTick(r)}:y&&!h?(u=!0,a=document.createTextNode(""),new y(r).observe(a,{characterData:!0}),c=function(){a.data=u=!u}):m&&m.resolve?(s=m.resolve(void 0),f=s.then,c=function(){f.call(s,r)}):c=function(){d.call(l,r)}),t.exports=w||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,c()),i=e}},function(t,e,n){var r=n(1);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=n(12),o=n(40).f,i={}.toString,c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return c&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return c.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(91).IteratorPrototype,o=n(43),i=n(17),c=n(41),u=n(34),a=function(){return this};t.exports=function(t,e,n){var s=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),c(t,s,!1,!0),u[s]=a,t}},function(t,e,n){var r=n(5),o=n(119);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=n(10),o=n(9).f,i=Function.prototype,c=i.toString,u=/^\s*function ([^ (]*)/;!r||"name"in i||o(i,"name",{configurable:!0,get:function(){try{return c.call(this).match(u)[1]}catch(t){return""}}})},function(t,e,n){var r=n(4),o=n(11),i=n(2)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){},function(t,e,n){"use strict";var r=n(7),o=n(29),i=n(20),c=n(3),u=n(77),a=[],s=a.sort,f=c((function(){a.sort(void 0)})),l=c((function(){a.sort(null)})),p=u("sort");r({target:"Array",proto:!0,forced:f||!l||p},{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(7),o=n(39),i=n(12),c=n(77),u=[].join,a=o!=Object,s=c("join",",");r({target:"Array",proto:!0,forced:a||s},{join:function(t){return u.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(7),o=n(48).map;r({target:"Array",proto:!0,forced:!n(50)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(67),o=n(121),i=n(5),c=n(18),u=n(79),a=n(127),s=n(19),f=n(68),l=n(28),p=n(3),v=[].push,d=Math.min,h=!p((function(){return!RegExp(4294967295,"y")}));r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=String(c(this)),i=void 0===n?4294967295:n>>>0;if(0===i)return[];if(void 0===t)return[r];if(!o(t))return e.call(r,t,i);for(var u,a,s,f=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,h=new RegExp(t.source,p+"g");(u=l.call(h,r))&&!((a=h.lastIndex)>d&&(f.push(r.slice(d,u.index)),u.length>1&&u.index<r.length&&v.apply(f,u.slice(1)),s=u[0].length,d=a,f.length>=i));)h.lastIndex===u.index&&h.lastIndex++;return d===r.length?!s&&h.test("")||f.push(""):f.push(r.slice(d)),f.length>i?f.slice(0,i):f}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var o=c(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,n):r.call(String(o),e,n)},function(t,o){var c=n(r,t,this,o,r!==e);if(c.done)return c.value;var l=i(t),p=String(this),v=u(l,RegExp),y=l.unicode,g=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(h?"y":"g"),m=new v(h?l:"^(?:"+l.source+")",g),b=void 0===o?4294967295:o>>>0;if(0===b)return[];if(0===p.length)return null===f(m,p)?[p]:[];for(var x=0,w=0,_=[];w<p.length;){m.lastIndex=h?w:0;var S,j=f(m,h?p:p.slice(w));if(null===j||(S=d(s(m.lastIndex+(h?0:w)),p.length))===x)w=a(p,w,y);else{if(_.push(p.slice(x,w)),_.length===b)return _;for(var O=1;O<=j.length-1;O++)if(_.push(j[O]),_.length===b)return _;w=x=S}}return _.push(p.slice(x)),_}]}),!h)},function(t,e,n){"use strict";var r=n(103).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){"use strict";var r=n(7),o=n(21),i=n(101),c=n(15),u=n(79),a=n(102),s=n(13);r({target:"Promise",proto:!0,real:!0},{finally:function(t){var e=u(this,c("Promise")),n="function"==typeof t;return this.then(n?function(n){return a(e,t()).then((function(){return n}))}:t,n?function(n){return a(e,t()).then((function(){throw n}))}:t)}}),o||"function"!=typeof i||i.prototype.finally||s(i.prototype,"finally",c("Promise").prototype.finally)},,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);n(51),n(66),n(122);var r=n(0);n(123),n(58),n(100);function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function t(e,n,r,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._key="06ff710b3a33453d91b1a04e2f52acaf",this.url="https://newsapi.org/v2/",this.endPoint="everything",this.sort="sortBy=".concat(e),this.pageSize="pageSize=".concat(n),this.language="language=".concat(r),this.period=this._calculatingPeriod(o)}var e,n,r;return e=t,(n=[{key:"getResponseJson",value:function(t){return t.ok?t.json():Promise.reject("Что-то пошло не так :(")}},{key:"getNews",value:function(t,e){var n,r=this;return n=e?"q=".concat(t,"&"):"qInTitle=".concat(t,"&"),fetch(this.url+this.endPoint+"?"+this.pageSize+"&"+this.sort+"&"+n+this.language+"&"+"from=".concat(this.period),{method:"GET",headers:{Authorization:this._key}}).then((function(t){return r.getResponseJson(t)}))}},{key:"_calculatingPeriod",value:function(t){var e=new Date;return e.setDate(e.getDate()-t),e.toISOString()}}])&&o(e.prototype,n),r&&o(e,r),t}(),c=(n(83),n(87),n(88),n(62),n(124),n(125),n(120),n(93),n(94),n(126),n(95),n(44)),u=n(22);function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==a(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var v=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=f(this,l(e).call(this))).obj=t,n.createCard(),n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,t),n=e,(r=[{key:"createCard",value:function(){var t=document.querySelector("#templateCard").content;return!0===/https:$/.test(this.obj.urlToImage)||null===this.obj.urlToImage?t.querySelector(".card__picture").src="src/img/imagePlaceholder@2x.png":t.querySelector(".card__picture").src=this.obj.urlToImage,t.querySelector(".card__date").textContent=u.a.getNormalTime(),t.querySelector(".card__heading").textContent=this.obj.title,u.a.date=this.obj.publishedAt,t.querySelector(".card__text-content").textContent=this._breakLongWords(this.obj.description),t.querySelector(".card__source").textContent=this.obj.source.name,t.querySelector(".card__link").href=this.obj.url,t.cloneNode(!0)}},{key:"_breakLongWords",value:function(t){return t?t.split(" ").map((function(t){return t.length>=25?t.split("").map((function(t,e){return e%25==0?t+"- ":t})).join(""):t})).join(" "):"Нажмите здесь, чтобы прочесть статью"}}])&&s(n.prototype,r),o&&s(n,o),e}(c.a),d=n(16);n(128);function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function g(t,e){return!e||"object"!==h(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function m(t){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function b(t,e){return(b=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var x=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=g(this,m(e).call(this,t))).form=n,r._isValid=!1,r._HANDLERS(),r}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&b(t,e)}(e,t),n=e,(o=[{key:"validation",value:function(){var t=this.form.elements.searchInput.value;if(this._isValid=!1,0===t.length)r.f.textContent="Нужно что-то ввести",r.f.classList.toggle("searching__error_shown"),r.n.classList.toggle("searching-form__button_moved");else if(t.length<=2&&0!=t.length)r.f.textContent="Введите больше двух символов",r.f.classList.add("searching__error_shown"),r.n.classList.add("searching-form__button_moved");else{if(!(t.length>50))return r.f.classList.remove("searching__error_shown"),r.n.classList.remove("searching-form__button_moved"),this._isValid=!0;r.f.textContent="Можно максимум 50 символов. Удалите еще ".concat(t.length-50),r.f.classList.add("searching__error_shown"),r.n.classList.add("searching-form__button_moved")}}},{key:"_errorRender",value:function(t,e){t?(r.f.classList.add("searching__error_shown"),r.n.classList.add("searching-form__button_moved"),r.f.textContent=e):r.f.textContent="",r.f.classList.remove("searching__error_shown"),r.n.classList.remove("searching-form__button_moved")}},{key:"submit",value:function(){var t=this;event.preventDefault(),this.validation(),this._isValid&&(this.form.searchInput.setAttribute("disabled","disabled"),this.form.submitBtn.setAttribute("disabled","disabled"),k.renderNews(this.form.elements.searchInput.value,!1).finally((function(){t.form.searchInput.disabled=!1,t.form.submitBtn.disabled=!1})))}},{key:"_HANDLERS",value:function(){var t=this;this.form.elements.searchInput.addEventListener("input",(function(){return t.validation()})),this.form.addEventListener("submit",(function(){return t.submit()}))}}])&&y(n.prototype,o),i&&y(n,i),e}(c.a),w=(n(69),n(97),n(99),n(31));function _(t){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function j(t,e){return!e||"object"!==_(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function O(t){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function P(t,e){return(P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var E=function(t){function e(t,n,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(o=j(this,O(e).call(this,t))).container=n,o.phrase=r,o._HANDLERS(),o._page,o._articles=[],o._articlesPerPage=[],o}var n,o,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&P(t,e)}(e,t),n=e,(o=[{key:"renderNews",value:function(t,e){for(var n=this;r.i.firstChild;)r.i.removeChild(r.i.firstChild);return r.k.classList.add("hidden"),r.o.classList.remove("hidden"),e?(r.b.classList.remove("hidden"),r.o.classList.add("hidden"),r.l.elements.searchInput.value=d.a.getItem("phrase"),this._articlesPerPage=this._pageSeparate(d.a.getItem("articles")),this._page=d.a.getItem("page"),this.addCardsToList(d.a.getItem("renderedNews"))):(L.getNews(t,!1).then((function(t){d.a.setData({mentionsInTitles:t.totalResults})})).catch((function(t){w.a.error=t,w.a.showError()})),L.getNews(t,!0).then((function(e){return n._page=0,n._showReaction(e),n._articles=e.articles,d.a.setData({phrase:t,totalResults:e.totalResults,articles:n._articles,page:n._page}),n._articlesPerPage=n._pageSeparate(n._articles),d.a.setData({renderedNews:n._articlesPerPage[n._page]}),n.addCardsToList(n._articlesPerPage[n._page]),e})).catch((function(t){w.a.error=t,w.a.showError()})))}},{key:"_pageSeparate",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=[],r=0,o=!0,i=!1,c=void 0;try{for(var u,a=t[Symbol.iterator]();!(o=(u=a.next()).done);o=!0){var s=u.value,f=n[r];f&&f.length<e?f.push(s):(n.length>0&&(r+=1),n[r]=[s])}}catch(t){i=!0,c=t}finally{try{o||null==a.return||a.return()}finally{if(i)throw c}}return n}},{key:"getMoreNews",value:function(){this._page++,r.g.classList.remove("hidden"),r.m.classList.add("hidden"),this.addCardsToList(this._articlesPerPage[this._page]);var t=d.a.getItem("renderedNews").concat(this._articlesPerPage[this._page]);d.a.setData({renderedNews:t,page:this._page}),r.g.classList.add("hidden"),r.m.classList.remove("hidden")}},{key:"addCardsToList",value:function(t){return t?t.forEach((function(t){var e=new v(t);r.i.appendChild(e.createCard())})):void 0}},{key:"_showReaction",value:function(t){0===t.totalResults?(r.k.classList.remove("hidden"),r.o.classList.add("hidden"),r.b.classList.add("hidden")):t.totalResults<3?(r.b.classList.remove("hidden"),r.o.classList.add("hidden"),r.m.classList.add("hidden")):(r.b.classList.remove("hidden"),r.o.classList.add("hidden"))}},{key:"_HANDLERS",value:function(){var t=this;r.m.addEventListener("click",(function(){return t.getMoreNews()}))}}])&&S(n.prototype,o),i&&S(n,i),e}(c.a);n.d(e,"newsApi",(function(){return L})),n.d(e,"searchInput",(function(){return T})),n.d(e,"cardList",(function(){return k}));var L=new i("relevancy",100,"ru",7),T=new x(!1,document.forms.search),k=new E([],r.i);d.a.getItem("articles")&&k.renderNews("",!0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY29uc3RhbnRzL0NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvbW9kdWxlcy9EYXRhU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9EYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL3V0aWxzL0Vycm9yUG9wdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvQmFzZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd3JhcHBlZC13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL21vZHVsZXMvTmV3c0FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL05ld3NDYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvU2VhcmNoSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9OZXdzQ2FyZExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJJTlBVVF9FUlJPUiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIlNFQVJDSElOR19GT1JNIiwiZm9ybXMiLCJzZWFyY2giLCJTVUJNSVRfQlROIiwiQ0FSRFNfU0VDVElPTiIsIk5FV1NfQ0FSRFNfQ09OVEFJTkVSIiwiU0hPV19NT1JFX0JUTiIsIldBSVRJTkdfQkxPQ0siLCJOT1RISU5HX0JMT0NLIiwiR1JBUEhfUk9XUyIsIkxPQURFUiIsImdldEVsZW1lbnRCeUlkIiwiQVNLX0hFQURJTkciLCJORVdTX0lOX1dFRUsiLCJNRU5USU9OUyIsIkNVUlJFTlRfTU9OVEgiLCJFUlJPUl9QT1BVUCIsIml0IiwiTWF0aCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJGdW5jdGlvbiIsInNoYXJlZCIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJzdG9yZSIsImV4ZWMiLCJlcnJvciIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiREVTQ1JJUFRPUlMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsIm9wdGlvbnMiLCJzb3VyY2UiLCJ0YXJnZXQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInVuZGVmaW5lZCIsInNoYW0iLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsImZhaWxzIiwiYSIsInRvU3RyaW5nIiwic2xpY2UiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsImhhcyIsIm5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmciLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJ1bnNhZmUiLCJzaW1wbGUiLCJqb2luIiwidGhpcyIsIklTX1BVUkUiLCJwdXNoIiwidmVyc2lvbiIsImNvcHlyaWdodCIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImRhdGFTdG9yYWdlIiwiZGF0YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJnZXRJdGVtIiwiY29uc29sZSIsImxvZyIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidG9JbnRlZ2VyIiwibWluIiwiYXJndW1lbnQiLCJ0aW1lTWFzaGluZSIsImRhdGUiLCJjdXJyZW50RGF0ZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInRpbWUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsImdldE1vbnRoIiwiZGF5IiwiZ2V0RGF0ZSIsIm51bU9mV2Vla2RheSIsImdldERheSIsIm5EYXlzQWdvIiwic2V0RGF0ZSIsInBlcmlvZCIsImRhdGVzIiwiZ2V0RGF0ZU5EYXlzQWdvIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWwiLCJ2YWx1ZU9mIiwic2V0IiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsIlNUQVRFIiwiZ2V0dGVyRm9yIiwiVFlQRSIsInN0YXRlIiwidHlwZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5cyIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIlJlZ0V4cCIsIm5hdGl2ZVJlcGxhY2UiLCJyZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJOUENHX0lOQ0xVREVEIiwic3RyIiwicmVDb3B5IiwibWF0Y2giLCJyZSIsImluZGV4IiwiY2xhc3NvZiIsIkFycmF5IiwiaXNBcnJheSIsImFyZyIsImVycm9yUG9wdXAiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ1c2VyQWdlbnQiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJ2OCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIlRPX1NUUklOR19UQUciLCJ3ZWxsS25vd25TeW1ib2wiLCJUQUciLCJ0aGF0IiwiYiIsImFwcGx5IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiRiIsIlByb3BlcnRpZXMiLCJyZXN1bHQiLCJCYXNlQ29tcG9uZW50IiwiaGFuZGxlcnMiLCJlbGVtIiwiX3NldEhhbmRsZXJzIiwiZm9yRWFjaCIsImV2ZW50IiwiZnVuYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbmRleE9mIiwibmFtZXMiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsIlNQRUNJRVMiLCJvcmlnaW5hbEFycmF5IiwiQyIsImNvbnN0cnVjdG9yIiwiVjhfVkVSU0lPTiIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJmb28iLCJCb29sZWFuIiwiJCIsInByb3RvIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJPYmplY3RQcm90b3R5cGUiLCJnZXRCdWlsdEluIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkl0ZXJhdG9ycyIsImRlZmluZUl0ZXJhdG9yIiwic2V0SW50ZXJuYWxTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsImRvbmUiLCJBcmd1bWVudHMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJnZXRQcm90b3R5cGVPZiIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsIm1heCIsImludGVnZXIiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsInNhbWVWYWx1ZSIsInJlZ0V4cEV4ZWMiLCJTRUFSQ0giLCJuYXRpdmVTZWFyY2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZWdleHAiLCJzZWFyY2hlciIsInJlcyIsInJ4IiwiUyIsInByZXZpb3VzTGFzdEluZGV4IiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiS0VZIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImZsYWdzIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwibWV0aG9kcyIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwiUiIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJrIiwibGVuIiwiRSIsIkEiLCJwcm9wZXJ0eUtleSIsImciLCJlIiwidGVzdCIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwiZG90QWxsIiwidW5pY29kZSIsInN0aWNreSIsImlzIiwieCIsInkiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiSVNfSU9TIiwibG9jYXRpb24iLCJzZXRJbW1lZGlhdGUiLCJjbGVhciIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImxpc3RlbmVyIiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsIlByb21pc2VDYXBhYmlsaXR5IiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic2V0VG9TdHJpbmdUYWciLCIkZm9yRWFjaCIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJRT2JqZWN0IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwid3JhcCIsImRlc2NyaXB0aW9uIiwic3ltYm9sIiwiaXNTeW1ib2wiLCJpdGVyYXRvciIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwic2V0dGVyIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCJzcGFjZSIsIiRyZXBsYWNlciIsIk5BTUUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sUHJvdG90eXBlIiwic3ltYm9sVG9TdHJpbmciLCJuYXRpdmUiLCJkZXNjIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJJVEVSQVRPUiIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJlbnRyaWVzIiwidmFsdWVzIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwiY2hhckF0IiwicG9pbnQiLCJET01JdGVyYWJsZXMiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsInNsb3BweUFycmF5TWV0aG9kIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJyZWRlZmluZUFsbCIsInNldFNwZWNpZXMiLCJhbkluc3RhbmNlIiwiaXRlcmF0ZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInRhc2siLCJtaWNyb3Rhc2siLCJwcm9taXNlUmVzb2x2ZSIsImhvc3RSZXBvcnRFcnJvcnMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJpbnNwZWN0U291cmNlIiwiJGZldGNoIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJJU19OT0RFIiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRmFrZVByb21pc2UiLCJ0aGVuIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsIml0ZXJhYmxlIiwiYWxsIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsImRvbWFpbiIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJwYXJlbnQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImZldGNoIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCIkcHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsInByb21pc2VDYXBhYmlsaXR5IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNoYXJDb2RlQXQiLCJjb2RlQXQiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQ29uc3RydWN0b3IiLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvck1ldGhvZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJSZXN1bHQiLCJzdG9wcGVkIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlckZuIiwic3RlcCIsInN0b3AiLCJFTlRSSUVTIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsInRvZ2dsZSIsIm5vZGUiLCJtYWNyb3Rhc2siLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsIl9fcHJvdG9fXyIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIk1BVENIIiwiaXNSZWdFeHAiLCJuYXRpdmVTb3J0Iiwic29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJTTE9QUFlfTUVUSE9EIiwiY29tcGFyZWZuIiwibmF0aXZlSm9pbiIsIkVTM19TVFJJTkdTIiwic2VwYXJhdG9yIiwiJG1hcCIsImFkdmFuY2VTdHJpbmdJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiYXJyYXlQdXNoIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwibmF0aXZlU3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsaW0iLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsInEiLCJ6IiwicmVhbCIsIm9uRmluYWxseSIsImlzRnVuY3Rpb24iLCJOZXdzQXBpIiwicGFnZVNpemUiLCJsYW5nIiwiX2tleSIsInVybCIsImVuZFBvaW50IiwibGFuZ3VhZ2UiLCJfY2FsY3VsYXRpbmdQZXJpb2QiLCJqc29uIiwicGhyYXNlIiwiaW5UaXRsZSIsImhvd1RvU2VhcmNoIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJnZXRSZXNwb25zZUpzb24iLCJOZXdzQ2FyZCIsIm9iaiIsImNyZWF0ZUNhcmQiLCJjYXJkVGVtcGxhdGUiLCJjb250ZW50IiwidXJsVG9JbWFnZSIsImdldE5vcm1hbFRpbWUiLCJ0aXRsZSIsInB1Ymxpc2hlZEF0IiwiX2JyZWFrTG9uZ1dvcmRzIiwiaHJlZiIsImNsb25lTm9kZSIsImVsZW1lbnQiLCJTZWFyY2hJbnB1dCIsImZvcm0iLCJfaXNWYWxpZCIsIl9IQU5ETEVSUyIsIl92YWx1ZSIsImVsZW1lbnRzIiwic2VhcmNoSW5wdXQiLCJtZXNzYWdlIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0aW9uIiwic2V0QXR0cmlidXRlIiwic3VibWl0QnRuIiwiY2FyZExpc3QiLCJyZW5kZXJOZXdzIiwiZmluYWxseSIsImRpc2FibGVkIiwic3VibWl0IiwiTmV3c0NhcmRMaXN0IiwiY29udGFpbmVyIiwiX3BhZ2UiLCJfYXJ0aWNsZXMiLCJfYXJ0aWNsZXNQZXJQYWdlIiwiaXNMb2NhbCIsImZpcnN0Q2hpbGQiLCJfcGFnZVNlcGFyYXRlIiwiYWRkQ2FyZHNUb0xpc3QiLCJuZXdzQXBpIiwiZ2V0TmV3cyIsInNldERhdGEiLCJtZW50aW9uc0luVGl0bGVzIiwidG90YWxSZXN1bHRzIiwiY2F0Y2giLCJlcnIiLCJzaG93RXJyb3IiLCJfc2hvd1JlYWN0aW9uIiwiYXJ0aWNsZXMiLCJwYWdlIiwicmVuZGVyZWROZXdzIiwiY3VycmVudFBhZ2VOdW1iZXIiLCJhcnRpY2xlIiwiY3VycmVudFBhZ2UiLCJuZXdEYXRhIiwiY2FyZCIsImdldE1vcmVOZXdzIiwiY29uc3RhbnRzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNT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LEVBQVNyZixTQUFRLFNBQUF5ZixHQUN0QixJQUFNRyxFQUFPLElBQUl2RCxFQUFTb0QsR0FDMUJ0dEIsSUFBcUIrTSxZQUFZMGdCLEVBQUtyRCxzQkFFbkMsSUEvSFgsb0NBa0lnQnhYLEdBR2EsSUFBckJBLEVBQUlpYSxjQUNOMXNCLElBQWN1SyxVQUFVRyxPQUFPLFVBQy9CM0ssSUFBY3dLLFVBQVVDLElBQUksVUFDNUI1SyxJQUFjMkssVUFBVUMsSUFBSSxXQUlyQmlJLEVBQUlpYSxhQUFlLEdBQzFCOXNCLElBQWMySyxVQUFVRyxPQUFPLFVBQy9CM0ssSUFBY3dLLFVBQVVDLElBQUksVUFDNUIxSyxJQUFjeUssVUFBVUMsSUFBSSxZQUs1QjVLLElBQWMySyxVQUFVRyxPQUFPLFVBQy9CM0ssSUFBY3dLLFVBQVVDLElBQUksYUFySmxDLGtDQXlKYyxXQUNWMUssSUFBYytOLGlCQUFpQixTQUFTLGtCQUFNLEVBQUswZixzQiwyQkExSnZELEdBQWtDamdCLEssNkhDUGxDLElBR2FnZixFQUFVLElBQUl0RCxFQUFRLFlBSGxCLElBR3lDLEtBRjNDLEdBSUZrQyxFQUFjLElBQUlOLEdBQVksRUFBT3RyQixTQUFTRyxNQUFNQyxRQUVwRDhyQixFQUFXLElBQUlLLEVBQWEsR0FBSTJCLEtBRXpDbG9CLElBQVlPLFFBQVEsYUFDdEIybEIsRUFBU0MsV0FBVyxJQUFJIiwiZmlsZSI6InNjcmlwdHMvaW5kZXguMDM1ZjlkNmQ0OGUzOWI5YzFmMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQxKTtcbiIsImV4cG9ydCBjb25zdCBJTlBVVF9FUlJPUiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VhcmNoaW5nX19lcnJvclwiKTtcbmV4cG9ydCBjb25zdCBTRUFSQ0hJTkdfRk9STSA9IGRvY3VtZW50LmZvcm1zLnNlYXJjaDtcbmV4cG9ydCBjb25zdCBTVUJNSVRfQlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZWFyY2hpbmctZm9ybV9fYnV0dG9uXCIpO1xuXG5leHBvcnQgY29uc3QgQ0FSRFNfU0VDVElPTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZC1saXN0XCIpO1xuZXhwb3J0IGNvbnN0IE5FV1NfQ0FSRFNfQ09OVEFJTkVSID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fY29udGFpbmVyXCIpO1xuZXhwb3J0IGNvbnN0IFNIT1dfTU9SRV9CVE4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbl9fc2hvdy1tb3JlXCIpO1xuZXhwb3J0IGNvbnN0IFdBSVRJTkdfQkxPQ0sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndhaXRpbmdcIik7XG5leHBvcnQgY29uc3QgTk9USElOR19CTE9DSyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubm90aGluZ1wiKTtcblxuZXhwb3J0IGNvbnN0IEdSQVBIX1JPV1MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmdyYXBoX19yb3dzXCIpO1xuXG5leHBvcnQgY29uc3QgTE9BREVSID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib3R0b21Mb2FkZXJcIik7XG5leHBvcnQgY29uc3QgQVNLX0hFQURJTkcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFza0hlYWRpbmdcIik7XG5leHBvcnQgY29uc3QgTkVXU19JTl9XRUVLID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXdzUGVyV2Vla1wiKTtcbmV4cG9ydCBjb25zdCBNRU5USU9OUyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudGlvbnNJbkhlYWRpbmdzXCIpO1xuZXhwb3J0IGNvbnN0IENVUlJFTlRfTU9OVEggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImN1cnJlbnRNb250aFwiKTtcblxuZXhwb3J0IGNvbnN0IExJTktfUkVHRVhQID0gLyheaHR0cHM/OlxcL1xcLyk/W2EtejAtOX5fXFwtLl0rXFwuW2Etel17Miw5fShcXC98OnxcXD9bIS1+XSopPyQvZztcblxuZXhwb3J0IGNvbnN0IEVSUk9SX1BPUFVQID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5lcnJvcl9fcG9wdXBcIik7XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9IE5BVElWRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdXG4gICAgfHwgKE5BVElWRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcobmF0aXZlRnVuY3Rpb25Ub1N0cmluZykuc3BsaXQoJ3RvU3RyaW5nJyk7XG5cbnNoYXJlZCgnaW5zcGVjdFNvdXJjZScsIGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gbmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbn0pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNC4xJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwiY2xhc3MgRGF0YVN0b3JhZ2Uge1xuICBzZXREYXRhKGRhdGEpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gZGF0YSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhW2tleV0pKTtcbiAgICB9XG4gIH1cblxuICBnZXRJdGVtKGtleSkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpO1xuICAgIH0gZWxzZSByZXR1cm4gY29uc29sZS5sb2coYNCSIExvY2FsU3RvcmFnZSDQv9C+INC60LvRjtGH0YMgJHtrZXl9INC90LjRh9C10LPQviDQvdC10YJgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZGF0YVN0b3JhZ2UgPSBuZXcgRGF0YVN0b3JhZ2UoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiZXhwb3J0IGNsYXNzIFR0aW1lTWFzaGluZSB7XG4gIGNvbnN0cnVjdG9yKGRhdGUpIHtcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgICB0aGlzLmRhdGUgPSBkYXRlIHx8IHRoaXMuY3VycmVudERhdGU7XG4gIH1cblxuICBnZXRJU09EYXRlKCkge1xuICAgIHJldHVybiAodGhpcy5kYXRlID0gdGhpcy5kYXRlLnRvSVNPU3RyaW5nKCkpO1xuICB9XG5cbiAgZ2V0Tm9ybWFsVGltZSgpIHtcbiAgICBjb25zdCB0aW1lID0gbmV3IERhdGUodGhpcy5kYXRlKTtcblxuICAgIGNvbnN0IHllYXIgPSB0aW1lLmdldEZ1bGxZZWFyKCk7XG4gICAgY29uc3QgbW9udGggPSB0aW1lLmdldE1vbnRoKCk7XG4gICAgY29uc3QgZGF5ID0gdGltZS5nZXREYXRlKCk7XG5cbiAgICBjb25zdCBtb250aHMgPSBbXG4gICAgICBcItGP0L3QstCw0YDRj1wiLFxuICAgICAgXCLRhNC10LLRgNCw0LvRj1wiLFxuICAgICAgXCLQvNCw0YDRgtCwXCIsXG4gICAgICBcItCw0L/RgNC10LvRj1wiLFxuICAgICAgXCLQvNCw0Y9cIixcbiAgICAgIFwi0LjRjtC90Y9cIixcbiAgICAgIFwi0LjRjtC70Y9cIixcbiAgICAgIFwi0LDQstCz0YPRgdGC0LBcIixcbiAgICAgIFwi0YHQtdC90YLRj9Cx0YDRj1wiLFxuICAgICAgXCLQvtC60YLRj9Cx0YDRj1wiLFxuICAgICAgXCLQvdC+0Y/QsdGA0Y9cIixcbiAgICAgIFwi0LTQtdC60LDQsdGA0Y9cIlxuICAgIF07XG5cbiAgICByZXR1cm4gYCR7ZGF5fSAke21vbnRoc1ttb250aF19LCAke3llYXJ9YDtcbiAgfVxuXG4gIGdldE51bU9mV2Vla2RheSgpIHtcbiAgICBjb25zdCB3ZWVrZGF5cyA9IFtcItCy0YFcIiwgXCLQv9C9XCIsIFwi0LLRglwiLCBcItGB0YBcIiwgXCLRh9GCXCIsIFwi0L/RglwiLCBcItGB0LFcIl07XG5cbiAgICBjb25zdCBudW1PZldlZWtkYXkgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpLmdldERheSgpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5kYXRlLmdldERhdGUoKSArIFwiLCBcIiArIHdlZWtkYXlzW251bU9mV2Vla2RheV07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGdldE1vbnRoQXNUZXh0KCkge1xuICAgIGNvbnN0IG1vbnRocyA9IFtcbiAgICAgIFwi0Y/QvdCy0LDRgNGMXCIsXG4gICAgICBcItGE0LXQstGA0LDQu9GMXCIsXG4gICAgICBcItC80LDRgNGCXCIsXG4gICAgICBcItCw0L/RgNC10LvRjFwiLFxuICAgICAgXCLQvNCw0LlcIixcbiAgICAgIFwi0LjRjtC90YxcIixcbiAgICAgIFwi0LjRjtC70YxcIixcbiAgICAgIFwi0LDQstCz0YPRgdGCXCIsXG4gICAgICBcItGB0LXQvdGC0Y/QsdGA0YxcIixcbiAgICAgIFwi0L7QutGC0Y/QsdGA0YxcIixcbiAgICAgIFwi0L3QvtGP0LHRgNGMXCIsXG4gICAgICBcItC00LXQutCw0LHRgNGMXCJcbiAgICBdO1xuICAgIHJldHVybiBtb250aHNbbmV3IERhdGUodGhpcy5kYXRlKS5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGdldERhdGVORGF5c0FnbyhuRGF5c0Fnbykge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuXG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gbkRheXNBZ28pO1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgfVxuXG4gIGdldERhdGVzRm9yUGVyaW9kKHBlcmlvZCkge1xuICAgIGNvbnN0IGRhdGVzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gcGVyaW9kIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGRhdGVzLnB1c2godGhpcy5nZXREYXRlTkRheXNBZ28oaSkpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRlcztcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdGltZU1hc2hpbmUgPSBuZXcgVHRpbWVNYXNoaW5lKCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9yZWdleHAtZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjbGFzc29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJpbXBvcnQgeyBFUlJPUl9QT1BVUCB9IGZyb20gXCIuLi9jb25zdGFudHMvQ29uc3RhbnRzLmpzXCI7XG5cbmNsYXNzIEVycm9yUG9wdXAge1xuICBjb25zdHJ1Y3RvcihlcnJvcikge1xuICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgfVxuXG4gIHNob3dFcnJvcigpIHtcbiAgICBFUlJPUl9QT1BVUC50ZXh0Q29udGVudCA9IHRoaXMuZXJyb3I7XG4gICAgRVJST1JfUE9QVVAuY2xhc3NMaXN0LmFkZChcImVycm9yX19wb3B1cF9zaG93blwiKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IEVSUk9SX1BPUFVQLmNsYXNzTGlzdC5yZW1vdmUoXCJlcnJvcl9fcG9wdXBfc2hvd25cIiksIDYwMDApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBlcnJvclBvcHVwID0gbmV3IEVycm9yUG9wdXAoKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgc2NyaXB0ID0gJ3NjcmlwdCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGpzID0gJ2phdmEnICsgc2NyaXB0ICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoanMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgc2NyaXB0ICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnLycgKyBzY3JpcHQgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuIiwiZXhwb3J0IGNsYXNzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihoYW5kbGVycywgZWxlbSkge1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5fc2V0SGFuZGxlcnMoaGFuZGxlcnMpO1xuICB9XG5cbiAgX3NldEhhbmRsZXJzKGhhbmRsZXJzKSB7XG4gICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKCh7IGV2ZW50LCBmdW5jIH0pID0+IHtcbiAgICAgICAgdGhpcy5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaGFyZWQoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKHRvU3RyaW5nICE9PSBPYmplY3RQcm90b3R5cGUudG9TdHJpbmcpIHtcbiAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihsZW5ndGgsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChTRUFSQ0gsIG5hdGl2ZVNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBzZWFyY2hlciAhPT0gdW5kZWZpbmVkID8gc2VhcmNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlU2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgICBpZiAoc2hhbSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbiAgfVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cblxuICByZXR1cm4gcmVnZXhwRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoV2Vha01hcCkpO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGBTYW1lVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc2FtZXZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gIW1ldGhvZCB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW9zJyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmICFmYWlscyhwb3N0KSkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwcGVkLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gTkFUSVZFX1NZTUJPTCAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9QcmltaXRpdmUoViwgdHJ1ZSk7XG4gIHZhciBlbnVtZXJhYmxlID0gbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywgUCkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzKHRoaXMsIFApIHx8ICFoYXMoQWxsU3ltYm9scywgUCkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhoaWRkZW5LZXlzLCBrZXkpKSByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciAkcmVwbGFjZXI7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcHBlZC13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgdHlwZW9mIE5hdGl2ZVN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICghKCdkZXNjcmlwdGlvbicgaW4gTmF0aXZlU3ltYm9sLnByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSB0aGlzIGluc3RhbmNlb2YgU3ltYm9sV3JhcHBlclxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIHZhciBzeW1ib2xQcm90b3R5cGUgPSBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG4gIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IGlzT2JqZWN0KHRoaXMpID8gdGhpcy52YWx1ZU9mKCkgOiB0aGlzO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nLmNhbGwoc3ltYm9sKTtcbiAgICAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIGNyZWF0ZShudWxsKSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOyB9O1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbmlmIChJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoIUlTX1BVUkUgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSBzbG9wcHlBcnJheU1ldGhvZCgnZm9yRWFjaCcpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIGluc3BlY3RTb3VyY2UgPSBzaGFyZWQoJ2luc3BlY3RTb3VyY2UnKTtcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiAhSVNfTk9ERSAmJiB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ICE9ICdmdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSAhPT0gJ1tvYmplY3Qgel0nID8gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn0gOiB0ZXN0LnRvU3RyaW5nO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBpdGVyYXRlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGZuLCB0aGF0LCBBU19FTlRSSUVTLCBJU19JVEVSQVRPUikge1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoZm4sIHRoYXQsIEFTX0VOVFJJRVMgPyAyIDogMSk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBBU19FTlRSSUVTXG4gICAgICAgICAgPyBib3VuZEZ1bmN0aW9uKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKVxuICAgICAgICAgIDogYm91bmRGdW5jdGlvbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHJlc3VsdCA9IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIGJvdW5kRnVuY3Rpb24sIHN0ZXAudmFsdWUsIEFTX0VOVFJJRVMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcblxuaXRlcmF0ZS5zdG9wID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCByZXN1bHQpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pb3MnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgJiYgIUlTX0lPUykge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nID0gRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZy5jYWxsKHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdGVzdC5zb3J0O1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdzb3J0Jyk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgU0xPUFBZX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyBuYXRpdmVTb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBuYXRpdmVKb2luID0gW10uam9pbjtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCBTTE9QUFlfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbi5jYWxsKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKSB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBhcnJheVB1c2ggPSBbXS5wdXNoO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIVJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMSB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtzdHJpbmddO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcnJheVB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBvdXRwdXQuc2xpY2UoMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IG5hdGl2ZVNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIGludGVybmFsU3BsaXQgPSBuYXRpdmVTcGxpdDtcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNVUFBPUlRTX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSB9LCB7XG4gICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKSk7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gICAgcmV0dXJuIHRoaXMudGhlbihcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5LFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseVxuICAgICk7XG4gIH1cbn0pO1xuXG4vLyBwYXRjaCBuYXRpdmUgUHJvbWlzZS5wcm90b3R5cGUgZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbmlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nICYmICFOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddKSB7XG4gIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXSk7XG59XG4iLCJleHBvcnQgY2xhc3MgTmV3c0FwaSB7XG4gIGNvbnN0cnVjdG9yKHNvcnQsIHBhZ2VTaXplLCBsYW5nLCBwZXJpb2QpIHtcbiAgICB0aGlzLl9rZXkgPSBcIjA2ZmY3MTBiM2EzMzQ1M2Q5MWIxYTA0ZTJmNTJhY2FmXCI7XG4gICAgdGhpcy51cmwgPSBcImh0dHBzOi8vbmV3c2FwaS5vcmcvdjIvXCI7XG4gICAgdGhpcy5lbmRQb2ludCA9IFwiZXZlcnl0aGluZ1wiO1xuICAgIHRoaXMuc29ydCA9IGBzb3J0Qnk9JHtzb3J0fWA7XG4gICAgdGhpcy5wYWdlU2l6ZSA9IGBwYWdlU2l6ZT0ke3BhZ2VTaXplfWA7XG4gICAgdGhpcy5sYW5ndWFnZSA9IGBsYW5ndWFnZT0ke2xhbmd9YDtcbiAgICB0aGlzLnBlcmlvZCA9IHRoaXMuX2NhbGN1bGF0aW5nUGVyaW9kKHBlcmlvZCk7XG4gIH1cblxuICBnZXRSZXNwb25zZUpzb24ocmVzKSB7XG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfSBlbHNlIHJldHVybiBQcm9taXNlLnJlamVjdChcItCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0LogOihcIik7XG4gIH1cblxuICBnZXROZXdzKHBocmFzZSwgaW5UaXRsZSkge1xuICAgIGxldCBob3dUb1NlYXJjaDtcblxuICAgIGlmIChpblRpdGxlKSB7XG4gICAgICBob3dUb1NlYXJjaCA9IGBxPSR7cGhyYXNlfSZgO1xuICAgIH0gZWxzZSBob3dUb1NlYXJjaCA9IGBxSW5UaXRsZT0ke3BocmFzZX0mYDtcblxuICAgIHJldHVybiBmZXRjaChcbiAgICAgIHRoaXMudXJsICtcbiAgICAgICAgdGhpcy5lbmRQb2ludCArXG4gICAgICAgIFwiP1wiICtcbiAgICAgICAgdGhpcy5wYWdlU2l6ZSArXG4gICAgICAgIFwiJlwiICtcbiAgICAgICAgdGhpcy5zb3J0ICtcbiAgICAgICAgXCImXCIgK1xuICAgICAgICBob3dUb1NlYXJjaCArXG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgK1xuICAgICAgICBcIiZcIiArXG4gICAgICAgIGBmcm9tPSR7dGhpcy5wZXJpb2R9YCxcblxuICAgICAge1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiB0aGlzLl9rZXlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICkudGhlbihyZXMgPT4gdGhpcy5nZXRSZXNwb25zZUpzb24ocmVzKSk7XG4gIH1cblxuICBfY2FsY3VsYXRpbmdQZXJpb2QocGVyaW9kKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gcGVyaW9kKTtcblxuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tIFwiLi9CYXNlQ29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyB0aW1lTWFzaGluZSB9IGZyb20gXCIuL0RhdGUuanNcIjtcblxuZXhwb3J0IGNsYXNzIE5ld3NDYXJkIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9iaikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vYmogPSBvYmo7XG4gICAgdGhpcy5jcmVhdGVDYXJkKCk7XG4gIH1cblxuICBjcmVhdGVDYXJkKCkge1xuICAgIC8v0JfQtNC10YHRjCDRgNCw0LHQvtGC0LDQtdC8INGBIEhUTUwt0YjQsNCx0LvQvtC90L7QvFxuICAgIGNvbnN0IGNhcmRUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGVtcGxhdGVDYXJkXCIpLmNvbnRlbnQ7XG5cbiAgICBjb25zdCBlbXB0eUh0dHBzID0gL2h0dHBzOiQvO1xuXG4gICAgLy/QmNC90L7Qs9C00LAg0LjQtyDQsNC/0Lgg0LLQvtC30LLRgNCw0YnQsNGO0YLRgdGPINC60LDRgNGC0L7Rh9C60Lgg0LHQtdC3INGE0L7RgtC+0LPRgNCw0YTQuNC4LCDQuNC70LgsINC/0L7Rh9C10LzRgy3RgtC+LCDRgdC+INGB0YLRgNC+0LrQvtC5IFwiaHR0cHM6XCIg0LLQvNC10YHRgtC+INCw0LTRgNC10YHQsFxuICAgIGlmIChcbiAgICAgIGVtcHR5SHR0cHMudGVzdCh0aGlzLm9iai51cmxUb0ltYWdlKSA9PT0gdHJ1ZSB8fFxuICAgICAgdGhpcy5vYmoudXJsVG9JbWFnZSA9PT0gbnVsbFxuICAgICkge1xuICAgICAgY2FyZFRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fcGljdHVyZVwiKS5zcmMgPVwic3JjL2ltZy9pbWFnZVBsYWNlaG9sZGVyQDJ4LnBuZ1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcihcIi5jYXJkX19waWN0dXJlXCIpLnNyYyA9IHRoaXMub2JqLnVybFRvSW1hZ2U7XG4gICAgfVxuXG4gICAgY2FyZFRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGF0ZVwiKS50ZXh0Q29udGVudCA9IHRpbWVNYXNoaW5lLmdldE5vcm1hbFRpbWUoKTtcbiAgICBjYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcihcIi5jYXJkX19oZWFkaW5nXCIpLnRleHRDb250ZW50ID0gdGhpcy5vYmoudGl0bGU7XG4gICAgdGltZU1hc2hpbmUuZGF0ZSA9IHRoaXMub2JqLnB1Ymxpc2hlZEF0O1xuXG4gICAgY2FyZFRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGV4dC1jb250ZW50XCIpLnRleHRDb250ZW50ID0gdGhpcy5fYnJlYWtMb25nV29yZHModGhpcy5vYmouZGVzY3JpcHRpb24pO1xuICAgIGNhcmRUZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3NvdXJjZVwiKS50ZXh0Q29udGVudCA9IHRoaXMub2JqLnNvdXJjZS5uYW1lO1xuICAgIGNhcmRUZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpbmtcIikuaHJlZiA9IHRoaXMub2JqLnVybDtcblxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZFRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XG4gIH1cblxuICBfYnJlYWtMb25nV29yZHMoc3RyaW5nKSB7XG4gICAgLy/QmNC90L7Qs9C00LAg0YMg0YHRgtCw0YLRjNC4INCy0LzQtdGB0YLQviDQtNC10YHQutGA0LjQv9GI0LXQvdCwINC/0YDQuNGF0L7QtNC40YIgTnVsbC4g0KLQvtCz0LTQsCDQvdCw0Lwg0L/QvtC80L7QttC10YIg0L/Qu9C10LnRgdGF0L7Qu9C00LXRgC5cbiAgICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIFwi0J3QsNC20LzQuNGC0LUg0LfQtNC10YHRjCwg0YfRgtC+0LHRiyDQv9GA0L7Rh9C10YHRgtGMINGB0YLQsNGC0YzRjlwiO1xuICAgIH1cblxuICAgIGNvbnN0IHdvcmRMZW5ndGggPSAyNTtcblxuICAgIC8v0KDQsNC30LHQuNC70Lgg0YHRgtGA0L7QutGDINC90LAg0LzQsNGB0YHQuNCyINGB0LvQvtCyXG4gICAgY29uc3QgYXJyID0gc3RyaW5nLnNwbGl0KFwiIFwiKTtcblxuICAgIHJldHVybiBhcnJcbiAgICAgIC5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCA+PSB3b3JkTGVuZ3RoKSB7XG4gICAgICAgICAgLy/QldGB0LvQuCDQsiDRgdC70L7QstC1INCx0L7Qu9GM0YjQtSAyMCDRgdC40LzQstC+0LvQvtCyLCDQtNC+0LHQsNCy0LvRj9C10Lwg0L/RgNC+0LHQtdC7INC/0L7RgdC70LUg0LrQsNC20LTQvtCz0L4gMjAg0YHQuNC80LLQvtC70LBcbiAgICAgICAgICByZXR1cm4gKGVsZW1lbnQgPSBlbGVtZW50XG4gICAgICAgICAgICAuc3BsaXQoXCJcIilcbiAgICAgICAgICAgIC5tYXAoKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gaW5kZXggJSB3b3JkTGVuZ3RoID09PSAwID8gZWwgKyBcIi0gXCIgOiBlbDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihcIlwiKSk7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIiBcIik7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tIFwiLi9CYXNlQ29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBJTlBVVF9FUlJPUiwgU1VCTUlUX0JUTiB9IGZyb20gXCIuLi9jb25zdGFudHMvQ29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBjYXJkTGlzdCB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoSW5wdXQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaGFuZGxlcnMsIGZvcm0pIHtcbiAgICBzdXBlcihoYW5kbGVycyk7XG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLl9pc1ZhbGlkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9IQU5ETEVSUygpO1xuICB9XG5cbiAgdmFsaWRhdGlvbigpIHtcbiAgICBjb25zdCBfdmFsdWUgPSB0aGlzLmZvcm0uZWxlbWVudHMuc2VhcmNoSW5wdXQudmFsdWU7XG5cbiAgICB0aGlzLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgaWYgKF92YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIElOUFVUX0VSUk9SLnRleHRDb250ZW50ID0gXCLQndGD0LbQvdC+INGH0YLQvi3RgtC+INCy0LLQtdGB0YLQuFwiO1xuICAgICAgSU5QVVRfRVJST1IuY2xhc3NMaXN0LnRvZ2dsZShcInNlYXJjaGluZ19fZXJyb3Jfc2hvd25cIik7XG4gICAgICBTVUJNSVRfQlROLmNsYXNzTGlzdC50b2dnbGUoXCJzZWFyY2hpbmctZm9ybV9fYnV0dG9uX21vdmVkXCIpO1xuICAgIH0gZWxzZSBpZiAoX3ZhbHVlLmxlbmd0aCA8PSAyICYmIF92YWx1ZS5sZW5ndGggIT0gMCkge1xuICAgICAgSU5QVVRfRVJST1IudGV4dENvbnRlbnQgPSBcItCS0LLQtdC00LjRgtC1INCx0L7Qu9GM0YjQtSDQtNCy0YPRhSDRgdC40LzQstC+0LvQvtCyXCI7XG4gICAgICBJTlBVVF9FUlJPUi5jbGFzc0xpc3QuYWRkKFwic2VhcmNoaW5nX19lcnJvcl9zaG93blwiKTtcbiAgICAgIFNVQk1JVF9CVE4uY2xhc3NMaXN0LmFkZChcInNlYXJjaGluZy1mb3JtX19idXR0b25fbW92ZWRcIik7XG4gICAgfSBlbHNlIGlmIChfdmFsdWUubGVuZ3RoID4gNTApIHtcbiAgICAgIElOUFVUX0VSUk9SLnRleHRDb250ZW50ID0gYNCc0L7QttC90L4g0LzQsNC60YHQuNC80YPQvCA1MCDRgdC40LzQstC+0LvQvtCyLiDQo9C00LDQu9C40YLQtSDQtdGJ0LUgJHtfdmFsdWUubGVuZ3RoIC1cbiAgICAgICAgNTB9YDtcbiAgICAgIElOUFVUX0VSUk9SLmNsYXNzTGlzdC5hZGQoXCJzZWFyY2hpbmdfX2Vycm9yX3Nob3duXCIpO1xuICAgICAgU1VCTUlUX0JUTi5jbGFzc0xpc3QuYWRkKFwic2VhcmNoaW5nLWZvcm1fX2J1dHRvbl9tb3ZlZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgSU5QVVRfRVJST1IuY2xhc3NMaXN0LnJlbW92ZShcInNlYXJjaGluZ19fZXJyb3Jfc2hvd25cIik7XG4gICAgICBTVUJNSVRfQlROLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWFyY2hpbmctZm9ybV9fYnV0dG9uX21vdmVkXCIpO1xuICAgICAgcmV0dXJuICh0aGlzLl9pc1ZhbGlkID0gdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgX2Vycm9yUmVuZGVyKGVycm9yLCBtZXNzYWdlKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBJTlBVVF9FUlJPUi5jbGFzc0xpc3QuYWRkKFwic2VhcmNoaW5nX19lcnJvcl9zaG93blwiKTtcbiAgICAgIFNVQk1JVF9CVE4uY2xhc3NMaXN0LmFkZChcInNlYXJjaGluZy1mb3JtX19idXR0b25fbW92ZWRcIik7XG4gICAgICBJTlBVVF9FUlJPUi50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgfSBlbHNlIElOUFVUX0VSUk9SLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBJTlBVVF9FUlJPUi5jbGFzc0xpc3QucmVtb3ZlKFwic2VhcmNoaW5nX19lcnJvcl9zaG93blwiKTtcbiAgICBTVUJNSVRfQlROLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWFyY2hpbmctZm9ybV9fYnV0dG9uX21vdmVkXCIpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy52YWxpZGF0aW9uKCk7XG5cbiAgICBpZiAodGhpcy5faXNWYWxpZCkge1xuICAgICAgdGhpcy5mb3JtLnNlYXJjaElucHV0LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgICB0aGlzLmZvcm0uc3VibWl0QnRuLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG5cbiAgICAgIGNhcmRMaXN0XG4gICAgICAgIC5yZW5kZXJOZXdzKHRoaXMuZm9ybS5lbGVtZW50cy5zZWFyY2hJbnB1dC52YWx1ZSwgZmFsc2UpXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmZvcm0uc2VhcmNoSW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmZvcm0uc3VibWl0QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9IQU5ETEVSUygpIHtcbiAgICB0aGlzLmZvcm0uZWxlbWVudHMuc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+XG4gICAgICB0aGlzLnZhbGlkYXRpb24oKVxuICAgICk7XG4gICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4gdGhpcy5zdWJtaXQoKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIFNFQVJDSElOR19GT1JNLFxuICBTSE9XX01PUkVfQlROLFxuICBORVdTX0NBUkRTX0NPTlRBSU5FUixcbiAgV0FJVElOR19CTE9DSyxcbiAgTk9USElOR19CTE9DSyxcbiAgQ0FSRFNfU0VDVElPTixcbiAgTE9BREVSXG59IGZyb20gXCIuLi9jb25zdGFudHMvQ29uc3RhbnRzLmpzXCI7XG5cbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tIFwiLi9CYXNlQ29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBkYXRhU3RvcmFnZSB9IGZyb20gXCIuLi9tb2R1bGVzL0RhdGFTdG9yYWdlLmpzXCI7XG5pbXBvcnQgeyBuZXdzQXBpIH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBOZXdzQ2FyZCB9IGZyb20gXCIuL05ld3NDYXJkLmpzXCI7XG5pbXBvcnQgeyBlcnJvclBvcHVwIH0gZnJvbSBcIi4uL3V0aWxzL0Vycm9yUG9wdXAuanNcIjtcblxuZXhwb3J0IGNsYXNzIE5ld3NDYXJkTGlzdCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihoYW5kbGVycywgY29udGFpbmVyLCBwaHJhc2UpIHtcbiAgICBzdXBlcihoYW5kbGVycyk7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5waHJhc2UgPSBwaHJhc2U7XG5cbiAgICB0aGlzLl9IQU5ETEVSUygpO1xuXG4gICAgdGhpcy5fcGFnZTtcbiAgICB0aGlzLl9hcnRpY2xlcyA9IFtdO1xuICAgIHRoaXMuX2FydGljbGVzUGVyUGFnZSA9IFtdO1xuICB9XG5cbiAgcmVuZGVyTmV3cyhwaHJhc2UsIGlzTG9jYWwpIHtcbiAgICAvL9Cn0LjRgdGC0LjRgiDRgdC/0LjRgdC+0Log0LrQsNGA0YLQvtGH0LXQuiDQv9C10YDQtdC0INC/0L7QstGC0L7RgNC90L7QuSDQt9Cw0LPRgNGD0LfQutC+0LlcbiAgICB3aGlsZSAoTkVXU19DQVJEU19DT05UQUlORVIuZmlyc3RDaGlsZCkge1xuICAgICAgTkVXU19DQVJEU19DT05UQUlORVIucmVtb3ZlQ2hpbGQoTkVXU19DQVJEU19DT05UQUlORVIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIE5PVEhJTkdfQkxPQ0suY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICBXQUlUSU5HX0JMT0NLLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG5cbiAgICAvL9Ct0YLQviDQvdGD0LbQvdC+LCDRh9GC0L7QsdGLINC30LDQs9GA0YPQt9C40YLRjCDQvdC+0LLQvtGB0YLQuCDQuNC3INC70L7QutCw0LvRjNC90L7Qs9C+INGF0YDQsNC90LjQu9C40YnQsCDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDRgdGC0YDQsNC90LjRhtGLXG4gICAgaWYgKGlzTG9jYWwpIHtcbiAgICAgIENBUkRTX1NFQ1RJT04uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgIFdBSVRJTkdfQkxPQ0suY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcblxuICAgICAgU0VBUkNISU5HX0ZPUk0uZWxlbWVudHMuc2VhcmNoSW5wdXQudmFsdWUgPSBkYXRhU3RvcmFnZS5nZXRJdGVtKFwicGhyYXNlXCIpO1xuXG4gICAgICB0aGlzLl9hcnRpY2xlc1BlclBhZ2UgPSB0aGlzLl9wYWdlU2VwYXJhdGUoXG4gICAgICAgIGRhdGFTdG9yYWdlLmdldEl0ZW0oXCJhcnRpY2xlc1wiKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3BhZ2UgPSBkYXRhU3RvcmFnZS5nZXRJdGVtKFwicGFnZVwiKTtcblxuICAgICAgcmV0dXJuIHRoaXMuYWRkQ2FyZHNUb0xpc3QoZGF0YVN0b3JhZ2UuZ2V0SXRlbShcInJlbmRlcmVkTmV3c1wiKSk7XG4gICAgfVxuXG4gICAgLy/QrdGC0L7RgiDQt9Cw0L/RgNC+0YEg0L3Rg9C20LXQvSwg0YfRgtC+0LHRiyDRgdC+0YXRgNCw0L3QuNGC0Ywg0LrQvtC70LjRh9C10YHRgtCy0L4g0YPQv9C+0LzQuNC90LDQvdC40Lkg0LIg0LfQsNCz0L7Qu9C+0LLQutCw0YVcbiAgICBlbHNlXG4gICAgICBuZXdzQXBpXG4gICAgICAgIC5nZXROZXdzKHBocmFzZSwgZmFsc2UpXG4gICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgZGF0YVN0b3JhZ2Uuc2V0RGF0YSh7XG4gICAgICAgICAgICBtZW50aW9uc0luVGl0bGVzOiByZXMudG90YWxSZXN1bHRzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGVycm9yUG9wdXAuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgZXJyb3JQb3B1cC5zaG93RXJyb3IoKTtcbiAgICAgICAgfSk7XG5cbiAgICAvL9CQINGN0YLQvtGCIOKAlCDRh9GC0L7QsdGLINC+0YLQvtCx0YDQsNC30LjRgtGMINGA0LXQt9GD0LvRjNGC0LDRgtGLXG4gICAgcmV0dXJuIG5ld3NBcGlcbiAgICAgIC5nZXROZXdzKHBocmFzZSwgdHJ1ZSlcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHRoaXMuX3BhZ2UgPSAwO1xuICAgICAgICB0aGlzLl9zaG93UmVhY3Rpb24ocmVzKTtcblxuICAgICAgICB0aGlzLl9hcnRpY2xlcyA9IHJlcy5hcnRpY2xlcztcblxuICAgICAgICAvL9Ch0L7RhdGA0LDQvdGP0Y4g0LLQtdGB0Ywg0YDQtdC30YPQu9GM0YLQsNGCINCyINGF0YDQsNC90LjQu9C40YnQtVxuICAgICAgICBkYXRhU3RvcmFnZS5zZXREYXRhKHtcbiAgICAgICAgICBwaHJhc2U6IHBocmFzZSxcbiAgICAgICAgICB0b3RhbFJlc3VsdHM6IHJlcy50b3RhbFJlc3VsdHMsXG4gICAgICAgICAgYXJ0aWNsZXM6IHRoaXMuX2FydGljbGVzLFxuICAgICAgICAgIHBhZ2U6IHRoaXMuX3BhZ2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fYXJ0aWNsZXNQZXJQYWdlID0gdGhpcy5fcGFnZVNlcGFyYXRlKHRoaXMuX2FydGljbGVzKTtcbiAgICAgICAgZGF0YVN0b3JhZ2Uuc2V0RGF0YSh7XG4gICAgICAgICAgcmVuZGVyZWROZXdzOiB0aGlzLl9hcnRpY2xlc1BlclBhZ2VbdGhpcy5fcGFnZV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDYXJkc1RvTGlzdCh0aGlzLl9hcnRpY2xlc1BlclBhZ2VbdGhpcy5fcGFnZV0pO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGVycm9yUG9wdXAuZXJyb3IgPSBlcnI7XG4gICAgICAgIGVycm9yUG9wdXAuc2hvd0Vycm9yKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9wYWdlU2VwYXJhdGUoYXJ0aWNsZXMsIHBhZ2VTaXplID0gMykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBjdXJyZW50UGFnZU51bWJlciA9IDA7XG5cbiAgICBmb3IgKGxldCBhcnRpY2xlIG9mIGFydGljbGVzKSB7XG4gICAgICBjb25zdCBjdXJyZW50UGFnZSA9IHJlc3VsdFtjdXJyZW50UGFnZU51bWJlcl07XG5cbiAgICAgIGlmIChjdXJyZW50UGFnZSAmJiBjdXJyZW50UGFnZS5sZW5ndGggPCBwYWdlU2l6ZSkge1xuICAgICAgICBjdXJyZW50UGFnZS5wdXNoKGFydGljbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY3VycmVudFBhZ2VOdW1iZXIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbY3VycmVudFBhZ2VOdW1iZXJdID0gW2FydGljbGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBnZXRNb3JlTmV3cygpIHtcbiAgICB0aGlzLl9wYWdlKys7XG4gICAgTE9BREVSLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgU0hPV19NT1JFX0JUTi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuXG4gICAgdGhpcy5hZGRDYXJkc1RvTGlzdCh0aGlzLl9hcnRpY2xlc1BlclBhZ2VbdGhpcy5fcGFnZV0pO1xuXG4gICAgY29uc3Qgc2F2ZWREYXRhID0gZGF0YVN0b3JhZ2UuZ2V0SXRlbShcInJlbmRlcmVkTmV3c1wiKTtcblxuICAgIGNvbnN0IG5ld0RhdGEgPSBzYXZlZERhdGEuY29uY2F0KHRoaXMuX2FydGljbGVzUGVyUGFnZVt0aGlzLl9wYWdlXSk7XG5cbiAgICBkYXRhU3RvcmFnZS5zZXREYXRhKHtcbiAgICAgIHJlbmRlcmVkTmV3czogbmV3RGF0YSxcbiAgICAgIHBhZ2U6IHRoaXMuX3BhZ2VcbiAgICB9KTtcbiAgICBMT0FERVIuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICBTSE9XX01PUkVfQlROLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH1cblxuICBhZGRDYXJkc1RvTGlzdChhcnRpY2xlcykge1xuICAgIGlmIChhcnRpY2xlcykge1xuICAgICAgcmV0dXJuIGFydGljbGVzLmZvckVhY2goYXJ0aWNsZSA9PiB7XG4gICAgICAgIGNvbnN0IGNhcmQgPSBuZXcgTmV3c0NhcmQoYXJ0aWNsZSk7XG4gICAgICAgIE5FV1NfQ0FSRFNfQ09OVEFJTkVSLmFwcGVuZENoaWxkKGNhcmQuY3JlYXRlQ2FyZCgpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSByZXR1cm47XG4gIH1cblxuICBfc2hvd1JlYWN0aW9uKHJlcykge1xuICAgIC8v0K3RgtC+0YIg0LzQtdGC0L7QtCDRg9C/0YDQsNCy0LvRj9C10YIg0LLQuNC00LjQvNC+0YHRgtGM0Y4g0YDQsNC30L3Ri9GFINCx0LvQvtC60L7QsiDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0YDQtdC30YPQu9GM0YLQsNGC0L7QslxuICAgIC8v0JXRgdC70Lgg0L3QvtCy0L7RgdGC0LXQuSDQvdC10YIg4oCUwqDQv9C+0LrQsNC30YvQstCw0LXQvCDQs9GA0YPRgdGC0L3Rg9GOINC70YPQv9GDXG4gICAgaWYgKHJlcy50b3RhbFJlc3VsdHMgPT09IDApIHtcbiAgICAgIE5PVEhJTkdfQkxPQ0suY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgIFdBSVRJTkdfQkxPQ0suY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgIENBUkRTX1NFQ1RJT04uY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICB9XG5cbiAgICAvL9C10YHQu9C4INC90L7QstC+0YHRgtC10Lkg0LzQtdC90YzRiNC1IDMg4oCUINGB0LrRgNGL0LLQsNC10Lwg0LrQvdC+0L/QutGDIMKr0L/QvtC60LDQt9Cw0YLRjCDQtdGJ0LXCu1xuICAgIGVsc2UgaWYgKHJlcy50b3RhbFJlc3VsdHMgPCAzKSB7XG4gICAgICBDQVJEU19TRUNUSU9OLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgICBXQUlUSU5HX0JMT0NLLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgICBTSE9XX01PUkVfQlROLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgfVxuXG4gICAgLy/QkiDQvtGB0YLQsNC70YzQvdGL0YUg0YHQu9GD0YfQsNGP0YUg0L/QvtC60LDQt9GL0LLQsNC10LxcbiAgICBlbHNlIHtcbiAgICAgIENBUkRTX1NFQ1RJT04uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgIFdBSVRJTkdfQkxPQ0suY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICB9XG4gIH1cblxuICBfSEFORExFUlMoKSB7XG4gICAgU0hPV19NT1JFX0JUTi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5nZXRNb3JlTmV3cygpKTtcbiAgfVxufVxuIiwiaW1wb3J0IFwiLi4vY3NzL2luZGV4LmNzc1wiO1xuXG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzL0NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgTmV3c0FwaSB9IGZyb20gXCIuL21vZHVsZXMvTmV3c0FwaS5qc1wiO1xuaW1wb3J0IFwiLi9jb21wb25lbnRzL05ld3NDYXJkLmpzXCI7XG5pbXBvcnQgeyBkYXRhU3RvcmFnZSB9IGZyb20gXCIuL21vZHVsZXMvRGF0YVN0b3JhZ2UuanNcIjtcbmltcG9ydCB7IFNlYXJjaElucHV0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9TZWFyY2hJbnB1dC5qc1wiO1xuaW1wb3J0IHsgTmV3c0NhcmRMaXN0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9OZXdzQ2FyZExpc3QuanNcIjtcblxuY29uc3QgcGFnZVNpemUgPSAxMDA7XG5jb25zdCBwZXJpb2QgPSA3O1xuXG5leHBvcnQgY29uc3QgbmV3c0FwaSA9IG5ldyBOZXdzQXBpKFwicmVsZXZhbmN5XCIsIHBhZ2VTaXplLCBcInJ1XCIsIHBlcmlvZCk7XG5cbmV4cG9ydCBjb25zdCBzZWFyY2hJbnB1dCA9IG5ldyBTZWFyY2hJbnB1dChmYWxzZSwgZG9jdW1lbnQuZm9ybXMuc2VhcmNoKTtcblxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0ID0gbmV3IE5ld3NDYXJkTGlzdChbXSwgY29uc3RhbnRzLk5FV1NfQ0FSRFNfQ09OVEFJTkVSKTtcblxuaWYgKGRhdGFTdG9yYWdlLmdldEl0ZW0oXCJhcnRpY2xlc1wiKSkge1xuICBjYXJkTGlzdC5yZW5kZXJOZXdzKFwiXCIsIHRydWUpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==